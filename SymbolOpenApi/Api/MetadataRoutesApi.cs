/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MetadataInfoDTO</returns>
        MetadataInfoDTO GetMetadata (string compositeHash);

        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MetadataInfoDTO</returns>
        ApiResponse<MetadataInfoDTO> GetMetadataWithHttpInfo (string compositeHash);
        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetMetadataMerkle (string compositeHash);

        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetMetadataMerkleWithHttpInfo (string compositeHash);
        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MetadataPage</returns>
        MetadataPage SearchMetadataEntries (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MetadataPage</returns>
        ApiResponse<MetadataPage> SearchMetadataEntriesWithHttpInfo (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataInfoDTO</returns>
        System.Threading.Tasks.Task<MetadataInfoDTO> GetMetadataAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataInfoDTO>> GetMetadataWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMetadataMerkleAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMetadataMerkleWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataPage</returns>
        System.Threading.Tasks.Task<MetadataPage> SearchMetadataEntriesAsync (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataPage>> SearchMetadataEntriesWithHttpInfoAsync (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataRoutesApi : IMetadataRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MetadataRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MetadataInfoDTO</returns>
        public MetadataInfoDTO GetMetadata (string compositeHash)
        {
             ApiResponse<MetadataInfoDTO> localVarResponse = GetMetadataWithHttpInfo(compositeHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MetadataInfoDTO</returns>
        public ApiResponse<MetadataInfoDTO> GetMetadataWithHttpInfo (string compositeHash)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadata");

            var localVarPath = "/metadata/{compositeHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MetadataInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataInfoDTO)));
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataInfoDTO</returns>
        public async System.Threading.Tasks.Task<MetadataInfoDTO> GetMetadataAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MetadataInfoDTO> localVarResponse = await GetMetadataWithHttpInfoAsync(compositeHash, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataInfoDTO>> GetMetadataWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadata");

            var localVarPath = "/metadata/{compositeHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MetadataInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataInfoDTO)));
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetMetadataMerkle (string compositeHash)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetMetadataMerkleWithHttpInfo(compositeHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetMetadataMerkleWithHttpInfo (string compositeHash)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadataMerkle");

            var localVarPath = "/metadata/{compositeHash}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadataMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMetadataMerkleAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetMetadataMerkleWithHttpInfoAsync(compositeHash, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMetadataMerkleWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadataMerkle");

            var localVarPath = "/metadata/{compositeHash}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadataMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MetadataPage</returns>
        public MetadataPage SearchMetadataEntries (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<MetadataPage> localVarResponse = SearchMetadataEntriesWithHttpInfo(sourceAddress, targetAddress, scopedMetadataKey, targetId, metadataType, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MetadataPage</returns>
        public ApiResponse<MetadataPage> SearchMetadataEntriesWithHttpInfo (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceAddress", sourceAddress)); // query parameter
            if (targetAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAddress", targetAddress)); // query parameter
            if (scopedMetadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scopedMetadataKey", scopedMetadataKey)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetId", targetId)); // query parameter
            if (metadataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadataType", metadataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMetadataEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MetadataPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataPage)));
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MetadataPage</returns>
        public async System.Threading.Tasks.Task<MetadataPage> SearchMetadataEntriesAsync (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MetadataPage> localVarResponse = await SearchMetadataEntriesWithHttpInfoAsync(sourceAddress, targetAddress, scopedMetadataKey, targetId, metadataType, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MetadataPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataPage>> SearchMetadataEntriesWithHttpInfoAsync (string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), string targetId = default(string), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sourceAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceAddress", sourceAddress)); // query parameter
            if (targetAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAddress", targetAddress)); // query parameter
            if (scopedMetadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scopedMetadataKey", scopedMetadataKey)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetId", targetId)); // query parameter
            if (metadataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadataType", metadataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMetadataEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MetadataPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataPage)));
        }

    }
}
