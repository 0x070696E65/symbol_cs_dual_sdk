/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMosaicRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>MosaicInfoDTO</returns>
        MosaicInfoDTO GetMosaic (string mosaicId);

        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>ApiResponse of MosaicInfoDTO</returns>
        ApiResponse<MosaicInfoDTO> GetMosaicWithHttpInfo (string mosaicId);
        /// <summary>
        /// Get mosaic merkle information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition merkle for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetMosaicMerkle (string mosaicId);

        /// <summary>
        /// Get mosaic merkle information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition merkle for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetMosaicMerkleWithHttpInfo (string mosaicId);
        /// <summary>
        /// Get mosaics information for an array of mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic definition.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>List<MosaicInfoDTO></returns>
        List<MosaicInfoDTO> GetMosaics (MosaicIds mosaicIds);

        /// <summary>
        /// Get mosaics information for an array of mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic definition.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>ApiResponse of List<MosaicInfoDTO></returns>
        ApiResponse<List<MosaicInfoDTO>> GetMosaicsWithHttpInfo (MosaicIds mosaicIds);
        /// <summary>
        /// Search mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaics.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MosaicPage</returns>
        MosaicPage SearchMosaics (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaics.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MosaicPage</returns>
        ApiResponse<MosaicPage> SearchMosaicsWithHttpInfo (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicInfoDTO</returns>
        System.Threading.Tasks.Task<MosaicInfoDTO> GetMosaicAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicInfoDTO>> GetMosaicWithHttpInfoAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get mosaic merkle information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition merkle for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMosaicMerkleAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mosaic merkle information
        /// </summary>
        /// <remarks>
        /// Gets the mosaic definition merkle for a given mosaic identifier.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMosaicMerkleWithHttpInfoAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get mosaics information for an array of mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic definition.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MosaicInfoDTO></returns>
        System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get mosaics information for an array of mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic definition.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsWithHttpInfoAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaics.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicPage</returns>
        System.Threading.Tasks.Task<MosaicPage> SearchMosaicsAsync (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search mosaics
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaics.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicPage>> SearchMosaicsWithHttpInfoAsync (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MosaicRoutesApi : IMosaicRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MosaicRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MosaicRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MosaicRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get mosaic information Gets the mosaic definition for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>MosaicInfoDTO</returns>
        public MosaicInfoDTO GetMosaic (string mosaicId)
        {
             ApiResponse<MosaicInfoDTO> localVarResponse = GetMosaicWithHttpInfo(mosaicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mosaic information Gets the mosaic definition for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>ApiResponse of MosaicInfoDTO</returns>
        public ApiResponse<MosaicInfoDTO> GetMosaicWithHttpInfo (string mosaicId)
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaic");

            var localVarPath = "/mosaics/{mosaicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", this.Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicInfoDTO)));
        }

        /// <summary>
        /// Get mosaic information Gets the mosaic definition for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicInfoDTO</returns>
        public async System.Threading.Tasks.Task<MosaicInfoDTO> GetMosaicAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MosaicInfoDTO> localVarResponse = await GetMosaicWithHttpInfoAsync(mosaicId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mosaic information Gets the mosaic definition for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicInfoDTO>> GetMosaicWithHttpInfoAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaic");

            var localVarPath = "/mosaics/{mosaicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", this.Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicInfoDTO)));
        }

        /// <summary>
        /// Get mosaic merkle information Gets the mosaic definition merkle for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetMosaicMerkle (string mosaicId)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetMosaicMerkleWithHttpInfo(mosaicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mosaic merkle information Gets the mosaic definition merkle for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetMosaicMerkleWithHttpInfo (string mosaicId)
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaicMerkle");

            var localVarPath = "/mosaics/{mosaicId}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", this.Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get mosaic merkle information Gets the mosaic definition merkle for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMosaicMerkleAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetMosaicMerkleWithHttpInfoAsync(mosaicId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mosaic merkle information Gets the mosaic definition merkle for a given mosaic identifier.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Mosaic identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMosaicMerkleWithHttpInfoAsync (string mosaicId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaicMerkle");

            var localVarPath = "/mosaics/{mosaicId}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", this.Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get mosaics information for an array of mosaics Gets an array of mosaic definition.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>List<MosaicInfoDTO></returns>
        public List<MosaicInfoDTO> GetMosaics (MosaicIds mosaicIds)
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = GetMosaicsWithHttpInfo(mosaicIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mosaics information for an array of mosaics Gets an array of mosaic definition.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>ApiResponse of List<MosaicInfoDTO></returns>
        public ApiResponse<List<MosaicInfoDTO>> GetMosaicsWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaics");

            var localVarPath = "/mosaics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MosaicInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Get mosaics information for an array of mosaics Gets an array of mosaic definition.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MosaicInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = await GetMosaicsWithHttpInfoAsync(mosaicIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mosaics information for an array of mosaics Gets an array of mosaic definition.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsWithHttpInfoAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaics");

            var localVarPath = "/mosaics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MosaicInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Search mosaics Gets an array of mosaics.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MosaicPage</returns>
        public MosaicPage SearchMosaics (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<MosaicPage> localVarResponse = SearchMosaicsWithHttpInfo(ownerAddress, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search mosaics Gets an array of mosaics.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MosaicPage</returns>
        public ApiResponse<MosaicPage> SearchMosaicsWithHttpInfo (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/mosaics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerAddress", ownerAddress)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicPage)));
        }

        /// <summary>
        /// Search mosaics Gets an array of mosaics.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicPage</returns>
        public async System.Threading.Tasks.Task<MosaicPage> SearchMosaicsAsync (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MosaicPage> localVarResponse = await SearchMosaicsWithHttpInfoAsync(ownerAddress, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search mosaics Gets an array of mosaics.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicPage>> SearchMosaicsWithHttpInfoAsync (string ownerAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/mosaics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerAddress", ownerAddress)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicPage)));
        }

    }
}
