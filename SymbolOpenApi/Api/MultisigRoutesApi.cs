/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultisigRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get multisig account information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MultisigAccountInfoDTO</returns>
        MultisigAccountInfoDTO GetAccountMultisig (string address);

        /// <summary>
        /// Get multisig account information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MultisigAccountInfoDTO</returns>
        ApiResponse<MultisigAccountInfoDTO> GetAccountMultisigWithHttpInfo (string address);
        /// <summary>
        /// Get multisig account graph information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account graph.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>List<MultisigAccountGraphInfoDTO></returns>
        List<MultisigAccountGraphInfoDTO> GetAccountMultisigGraph (string address);

        /// <summary>
        /// Get multisig account graph information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account graph.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of List<MultisigAccountGraphInfoDTO></returns>
        ApiResponse<List<MultisigAccountGraphInfoDTO>> GetAccountMultisigGraphWithHttpInfo (string address);
        /// <summary>
        /// Get multisig account merkle information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account merkle information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetAccountMultisigMerkle (string address);

        /// <summary>
        /// Get multisig account merkle information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account merkle information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetAccountMultisigMerkleWithHttpInfo (string address);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get multisig account information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MultisigAccountInfoDTO</returns>
        System.Threading.Tasks.Task<MultisigAccountInfoDTO> GetAccountMultisigAsync (string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multisig account information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MultisigAccountInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultisigAccountInfoDTO>> GetAccountMultisigWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multisig account graph information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account graph.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MultisigAccountGraphInfoDTO></returns>
        System.Threading.Tasks.Task<List<MultisigAccountGraphInfoDTO>> GetAccountMultisigGraphAsync (string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multisig account graph information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account graph.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MultisigAccountGraphInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MultisigAccountGraphInfoDTO>>> GetAccountMultisigGraphWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get multisig account merkle information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account merkle information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetAccountMultisigMerkleAsync (string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get multisig account merkle information
        /// </summary>
        /// <remarks>
        /// Returns the multisig account merkle information.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetAccountMultisigMerkleWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MultisigRoutesApi : IMultisigRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultisigRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MultisigRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultisigRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get multisig account information Returns the multisig account information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MultisigAccountInfoDTO</returns>
        public MultisigAccountInfoDTO GetAccountMultisig (string address)
        {
             ApiResponse<MultisigAccountInfoDTO> localVarResponse = GetAccountMultisigWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multisig account information Returns the multisig account information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MultisigAccountInfoDTO</returns>
        public ApiResponse<MultisigAccountInfoDTO> GetAccountMultisigWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisig");

            var localVarPath = "/account/{address}/multisig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultisigAccountInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultisigAccountInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultisigAccountInfoDTO)));
        }

        /// <summary>
        /// Get multisig account information Returns the multisig account information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MultisigAccountInfoDTO</returns>
        public async System.Threading.Tasks.Task<MultisigAccountInfoDTO> GetAccountMultisigAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MultisigAccountInfoDTO> localVarResponse = await GetAccountMultisigWithHttpInfoAsync(address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multisig account information Returns the multisig account information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MultisigAccountInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultisigAccountInfoDTO>> GetAccountMultisigWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisig");

            var localVarPath = "/account/{address}/multisig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultisigAccountInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultisigAccountInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultisigAccountInfoDTO)));
        }

        /// <summary>
        /// Get multisig account graph information Returns the multisig account graph.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>List<MultisigAccountGraphInfoDTO></returns>
        public List<MultisigAccountGraphInfoDTO> GetAccountMultisigGraph (string address)
        {
             ApiResponse<List<MultisigAccountGraphInfoDTO>> localVarResponse = GetAccountMultisigGraphWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multisig account graph information Returns the multisig account graph.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of List<MultisigAccountGraphInfoDTO></returns>
        public ApiResponse<List<MultisigAccountGraphInfoDTO>> GetAccountMultisigGraphWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisigGraph");

            var localVarPath = "/account/{address}/multisig/graph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisigGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultisigAccountGraphInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultisigAccountGraphInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultisigAccountGraphInfoDTO>)));
        }

        /// <summary>
        /// Get multisig account graph information Returns the multisig account graph.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MultisigAccountGraphInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<MultisigAccountGraphInfoDTO>> GetAccountMultisigGraphAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MultisigAccountGraphInfoDTO>> localVarResponse = await GetAccountMultisigGraphWithHttpInfoAsync(address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multisig account graph information Returns the multisig account graph.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MultisigAccountGraphInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MultisigAccountGraphInfoDTO>>> GetAccountMultisigGraphWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisigGraph");

            var localVarPath = "/account/{address}/multisig/graph";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisigGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultisigAccountGraphInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultisigAccountGraphInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultisigAccountGraphInfoDTO>)));
        }

        /// <summary>
        /// Get multisig account merkle information Returns the multisig account merkle information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetAccountMultisigMerkle (string address)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetAccountMultisigMerkleWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multisig account merkle information Returns the multisig account merkle information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetAccountMultisigMerkleWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisigMerkle");

            var localVarPath = "/account/{address}/multisig/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisigMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get multisig account merkle information Returns the multisig account merkle information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetAccountMultisigMerkleAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetAccountMultisigMerkleWithHttpInfoAsync(address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multisig account merkle information Returns the multisig account merkle information.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetAccountMultisigMerkleWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling MultisigRoutesApi->GetAccountMultisigMerkle");

            var localVarPath = "/account/{address}/multisig/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisigMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

    }
}
