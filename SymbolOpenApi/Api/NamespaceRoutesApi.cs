/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamespaceRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <returns>AccountsNamesDTO</returns>
        AccountsNamesDTO GetAccountsNames (Addresses addresses);

        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <returns>ApiResponse of AccountsNamesDTO</returns>
        ApiResponse<AccountsNamesDTO> GetAccountsNamesWithHttpInfo (Addresses addresses);
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>MosaicsNamesDTO</returns>
        MosaicsNamesDTO GetMosaicsNames (MosaicIds mosaicIds);

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>ApiResponse of MosaicsNamesDTO</returns>
        ApiResponse<MosaicsNamesDTO> GetMosaicsNamesWithHttpInfo (MosaicIds mosaicIds);
        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>NamespaceInfoDTO</returns>
        NamespaceInfoDTO GetNamespace (string namespaceId);

        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>ApiResponse of NamespaceInfoDTO</returns>
        ApiResponse<NamespaceInfoDTO> GetNamespaceWithHttpInfo (string namespaceId);
        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetNamespaceMerkle (string namespaceId);

        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetNamespaceMerkleWithHttpInfo (string namespaceId);
        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <returns>List<NamespaceNameDTO></returns>
        List<NamespaceNameDTO> GetNamespacesNames (NamespaceIds namespaceIds);

        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <returns>ApiResponse of List<NamespaceNameDTO></returns>
        ApiResponse<List<NamespaceNameDTO>> GetNamespacesNamesWithHttpInfo (NamespaceIds namespaceIds);
        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>NamespacePage</returns>
        NamespacePage SearchNamespaces (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of NamespacePage</returns>
        ApiResponse<NamespacePage> SearchNamespacesWithHttpInfo (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountsNamesDTO</returns>
        System.Threading.Tasks.Task<AccountsNamesDTO> GetAccountsNamesAsync (Addresses addresses, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountsNamesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsNamesDTO>> GetAccountsNamesWithHttpInfoAsync (Addresses addresses, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicsNamesDTO</returns>
        System.Threading.Tasks.Task<MosaicsNamesDTO> GetMosaicsNamesAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicsNamesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicsNamesDTO>> GetMosaicsNamesWithHttpInfoAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        System.Threading.Tasks.Task<NamespaceInfoDTO> GetNamespaceAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamespaceInfoDTO>> GetNamespaceWithHttpInfoAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetNamespaceMerkleAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetNamespaceMerkleWithHttpInfoAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<NamespaceNameDTO></returns>
        System.Threading.Tasks.Task<List<NamespaceNameDTO>> GetNamespacesNamesAsync (NamespaceIds namespaceIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NamespaceNameDTO>>> GetNamespacesNamesWithHttpInfoAsync (NamespaceIds namespaceIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NamespacePage</returns>
        System.Threading.Tasks.Task<NamespacePage> SearchNamespacesAsync (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NamespacePage)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamespacePage>> SearchNamespacesWithHttpInfoAsync (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NamespaceRoutesApi : INamespaceRoutesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamespaceRoutesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public NamespaceRoutesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NamespaceRoutesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <returns>AccountsNamesDTO</returns>
        public AccountsNamesDTO GetAccountsNames (Addresses addresses)
        {
             ApiResponse<AccountsNamesDTO> localVarResponse = GetAccountsNamesWithHttpInfo(addresses);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <returns>ApiResponse of AccountsNamesDTO</returns>
        public ApiResponse<AccountsNamesDTO> GetAccountsNamesWithHttpInfo (Addresses addresses)
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
                throw new ApiException(400, "Missing required parameter 'addresses' when calling NamespaceRoutesApi->GetAccountsNames");

            var localVarPath = "/namespaces/account/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addresses != null && addresses.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addresses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addresses; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsNamesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountsNamesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsNamesDTO)));
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountsNamesDTO</returns>
        public async System.Threading.Tasks.Task<AccountsNamesDTO> GetAccountsNamesAsync (Addresses addresses, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountsNamesDTO> localVarResponse = await GetAccountsNamesWithHttpInfoAsync(addresses, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountsNamesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountsNamesDTO>> GetAccountsNamesWithHttpInfoAsync (Addresses addresses, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
                throw new ApiException(400, "Missing required parameter 'addresses' when calling NamespaceRoutesApi->GetAccountsNames");

            var localVarPath = "/namespaces/account/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addresses != null && addresses.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addresses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addresses; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountsNamesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountsNamesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountsNamesDTO)));
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>MosaicsNamesDTO</returns>
        public MosaicsNamesDTO GetMosaicsNames (MosaicIds mosaicIds)
        {
             ApiResponse<MosaicsNamesDTO> localVarResponse = GetMosaicsNamesWithHttpInfo(mosaicIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <returns>ApiResponse of MosaicsNamesDTO</returns>
        public ApiResponse<MosaicsNamesDTO> GetMosaicsNamesWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling NamespaceRoutesApi->GetMosaicsNames");

            var localVarPath = "/namespaces/mosaic/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicsNamesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicsNamesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicsNamesDTO)));
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicsNamesDTO</returns>
        public async System.Threading.Tasks.Task<MosaicsNamesDTO> GetMosaicsNamesAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MosaicsNamesDTO> localVarResponse = await GetMosaicsNamesWithHttpInfoAsync(mosaicIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicsNamesDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicsNamesDTO>> GetMosaicsNamesWithHttpInfoAsync (MosaicIds mosaicIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling NamespaceRoutesApi->GetMosaicsNames");

            var localVarPath = "/namespaces/mosaic/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicsNamesDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicsNamesDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicsNamesDTO)));
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>NamespaceInfoDTO</returns>
        public NamespaceInfoDTO GetNamespace (string namespaceId)
        {
             ApiResponse<NamespaceInfoDTO> localVarResponse = GetNamespaceWithHttpInfo(namespaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>ApiResponse of NamespaceInfoDTO</returns>
        public ApiResponse<NamespaceInfoDTO> GetNamespaceWithHttpInfo (string namespaceId)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespace");

            var localVarPath = "/namespaces/{namespaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", this.Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamespaceInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NamespaceInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamespaceInfoDTO)));
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        public async System.Threading.Tasks.Task<NamespaceInfoDTO> GetNamespaceAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NamespaceInfoDTO> localVarResponse = await GetNamespaceWithHttpInfoAsync(namespaceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NamespaceInfoDTO>> GetNamespaceWithHttpInfoAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespace");

            var localVarPath = "/namespaces/{namespaceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", this.Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamespaceInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NamespaceInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamespaceInfoDTO)));
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetNamespaceMerkle (string namespaceId)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetNamespaceMerkleWithHttpInfo(namespaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetNamespaceMerkleWithHttpInfo (string namespaceId)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespaceMerkle");

            var localVarPath = "/namespaces/{namespaceId}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", this.Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespaceMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetNamespaceMerkleAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetNamespaceMerkleWithHttpInfoAsync(namespaceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetNamespaceMerkleWithHttpInfoAsync (string namespaceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespaceMerkle");

            var localVarPath = "/namespaces/{namespaceId}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", this.Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespaceMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <returns>List<NamespaceNameDTO></returns>
        public List<NamespaceNameDTO> GetNamespacesNames (NamespaceIds namespaceIds)
        {
             ApiResponse<List<NamespaceNameDTO>> localVarResponse = GetNamespacesNamesWithHttpInfo(namespaceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <returns>ApiResponse of List<NamespaceNameDTO></returns>
        public ApiResponse<List<NamespaceNameDTO>> GetNamespacesNamesWithHttpInfo (NamespaceIds namespaceIds)
        {
            // verify the required parameter 'namespaceIds' is set
            if (namespaceIds == null)
                throw new ApiException(400, "Missing required parameter 'namespaceIds' when calling NamespaceRoutesApi->GetNamespacesNames");

            var localVarPath = "/namespaces/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceIds != null && namespaceIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(namespaceIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = namespaceIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NamespaceNameDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NamespaceNameDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NamespaceNameDTO>)));
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<NamespaceNameDTO></returns>
        public async System.Threading.Tasks.Task<List<NamespaceNameDTO>> GetNamespacesNamesAsync (NamespaceIds namespaceIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NamespaceNameDTO>> localVarResponse = await GetNamespacesNamesWithHttpInfoAsync(namespaceIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NamespaceNameDTO>>> GetNamespacesNamesWithHttpInfoAsync (NamespaceIds namespaceIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'namespaceIds' is set
            if (namespaceIds == null)
                throw new ApiException(400, "Missing required parameter 'namespaceIds' when calling NamespaceRoutesApi->GetNamespacesNames");

            var localVarPath = "/namespaces/names";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceIds != null && namespaceIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(namespaceIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = namespaceIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NamespaceNameDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NamespaceNameDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NamespaceNameDTO>)));
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>NamespacePage</returns>
        public NamespacePage SearchNamespaces (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<NamespacePage> localVarResponse = SearchNamespacesWithHttpInfo(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of NamespacePage</returns>
        public ApiResponse<NamespacePage> SearchNamespacesWithHttpInfo (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/namespaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerAddress", ownerAddress)); // query parameter
            if (registrationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "registrationType", registrationType)); // query parameter
            if (level0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level0", level0)); // query parameter
            if (aliasType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aliasType", aliasType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamespacePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NamespacePage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamespacePage)));
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NamespacePage</returns>
        public async System.Threading.Tasks.Task<NamespacePage> SearchNamespacesAsync (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NamespacePage> localVarResponse = await SearchNamespacesWithHttpInfoAsync(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NamespacePage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NamespacePage>> SearchNamespacesWithHttpInfoAsync (string ownerAddress = default(string), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string level0 = default(string), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/namespaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerAddress", ownerAddress)); // query parameter
            if (registrationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "registrationType", registrationType)); // query parameter
            if (level0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level0", level0)); // query parameter
            if (aliasType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aliasType", aliasType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NamespacePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NamespacePage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NamespacePage)));
        }

    }
}
