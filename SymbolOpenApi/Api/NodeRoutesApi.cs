/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INodeRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the node health information
        /// </summary>
        /// <remarks>
        /// Supplies information regarding the connection and services status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeHealthInfoDTO</returns>
        NodeHealthInfoDTO GetNodeHealth ();

        /// <summary>
        /// Get the node health information
        /// </summary>
        /// <remarks>
        /// Supplies information regarding the connection and services status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeHealthInfoDTO</returns>
        ApiResponse<NodeHealthInfoDTO> GetNodeHealthWithHttpInfo ();
        /// <summary>
        /// Get the node information
        /// </summary>
        /// <remarks>
        /// Supplies additional information about the application running on a node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeInfoDTO</returns>
        NodeInfoDTO GetNodeInfo ();

        /// <summary>
        /// Get the node information
        /// </summary>
        /// <remarks>
        /// Supplies additional information about the application running on a node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeInfoDTO</returns>
        ApiResponse<NodeInfoDTO> GetNodeInfoWithHttpInfo ();
        /// <summary>
        /// Get peers information
        /// </summary>
        /// <remarks>
        /// Gets the list of peers visible by the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<NodeInfoDTO></returns>
        List<NodeInfoDTO> GetNodePeers ();

        /// <summary>
        /// Get peers information
        /// </summary>
        /// <remarks>
        /// Gets the list of peers visible by the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<NodeInfoDTO></returns>
        ApiResponse<List<NodeInfoDTO>> GetNodePeersWithHttpInfo ();
        /// <summary>
        /// Get the storage information of the node
        /// </summary>
        /// <remarks>
        /// Returns storage information about the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StorageInfoDTO</returns>
        StorageInfoDTO GetNodeStorage ();

        /// <summary>
        /// Get the storage information of the node
        /// </summary>
        /// <remarks>
        /// Returns storage information about the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StorageInfoDTO</returns>
        ApiResponse<StorageInfoDTO> GetNodeStorageWithHttpInfo ();
        /// <summary>
        /// Get the node time
        /// </summary>
        /// <remarks>
        /// Gets the node time at the moment the reply was sent and received.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeTimeDTO</returns>
        NodeTimeDTO GetNodeTime ();

        /// <summary>
        /// Get the node time
        /// </summary>
        /// <remarks>
        /// Gets the node time at the moment the reply was sent and received.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeTimeDTO</returns>
        ApiResponse<NodeTimeDTO> GetNodeTimeWithHttpInfo ();
        /// <summary>
        /// Get the version of the running REST component
        /// </summary>
        /// <remarks>
        /// Returns the version of the running catapult-rest component.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServerInfoDTO</returns>
        ServerInfoDTO GetServerInfo ();

        /// <summary>
        /// Get the version of the running REST component
        /// </summary>
        /// <remarks>
        /// Returns the version of the running catapult-rest component.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServerInfoDTO</returns>
        ApiResponse<ServerInfoDTO> GetServerInfoWithHttpInfo ();
        /// <summary>
        /// Get the unlocked harvesting account public keys.
        /// </summary>
        /// <remarks>
        /// Returns array of unlocked account public keys.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnlockedAccountDTO</returns>
        UnlockedAccountDTO GetUnlockedAccount ();

        /// <summary>
        /// Get the unlocked harvesting account public keys.
        /// </summary>
        /// <remarks>
        /// Returns array of unlocked account public keys.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnlockedAccountDTO</returns>
        ApiResponse<UnlockedAccountDTO> GetUnlockedAccountWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the node health information
        /// </summary>
        /// <remarks>
        /// Supplies information regarding the connection and services status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeHealthInfoDTO</returns>
        System.Threading.Tasks.Task<NodeHealthInfoDTO> GetNodeHealthAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the node health information
        /// </summary>
        /// <remarks>
        /// Supplies information regarding the connection and services status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeHealthInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeHealthInfoDTO>> GetNodeHealthWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the node information
        /// </summary>
        /// <remarks>
        /// Supplies additional information about the application running on a node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeInfoDTO</returns>
        System.Threading.Tasks.Task<NodeInfoDTO> GetNodeInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the node information
        /// </summary>
        /// <remarks>
        /// Supplies additional information about the application running on a node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeInfoDTO>> GetNodeInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get peers information
        /// </summary>
        /// <remarks>
        /// Gets the list of peers visible by the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<NodeInfoDTO></returns>
        System.Threading.Tasks.Task<List<NodeInfoDTO>> GetNodePeersAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get peers information
        /// </summary>
        /// <remarks>
        /// Gets the list of peers visible by the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NodeInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NodeInfoDTO>>> GetNodePeersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the storage information of the node
        /// </summary>
        /// <remarks>
        /// Returns storage information about the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StorageInfoDTO</returns>
        System.Threading.Tasks.Task<StorageInfoDTO> GetNodeStorageAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the storage information of the node
        /// </summary>
        /// <remarks>
        /// Returns storage information about the node.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StorageInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageInfoDTO>> GetNodeStorageWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the node time
        /// </summary>
        /// <remarks>
        /// Gets the node time at the moment the reply was sent and received.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeTimeDTO</returns>
        System.Threading.Tasks.Task<NodeTimeDTO> GetNodeTimeAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the node time
        /// </summary>
        /// <remarks>
        /// Gets the node time at the moment the reply was sent and received.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeTimeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeTimeDTO>> GetNodeTimeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the version of the running REST component
        /// </summary>
        /// <remarks>
        /// Returns the version of the running catapult-rest component.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ServerInfoDTO</returns>
        System.Threading.Tasks.Task<ServerInfoDTO> GetServerInfoAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the version of the running REST component
        /// </summary>
        /// <remarks>
        /// Returns the version of the running catapult-rest component.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ServerInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerInfoDTO>> GetServerInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the unlocked harvesting account public keys.
        /// </summary>
        /// <remarks>
        /// Returns array of unlocked account public keys.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnlockedAccountDTO</returns>
        System.Threading.Tasks.Task<UnlockedAccountDTO> GetUnlockedAccountAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the unlocked harvesting account public keys.
        /// </summary>
        /// <remarks>
        /// Returns array of unlocked account public keys.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnlockedAccountDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnlockedAccountDTO>> GetUnlockedAccountWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NodeRoutesApi : INodeRoutesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NodeRoutesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public NodeRoutesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NodeRoutesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the node health information Supplies information regarding the connection and services status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeHealthInfoDTO</returns>
        public NodeHealthInfoDTO GetNodeHealth ()
        {
             ApiResponse<NodeHealthInfoDTO> localVarResponse = GetNodeHealthWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the node health information Supplies information regarding the connection and services status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeHealthInfoDTO</returns>
        public ApiResponse<NodeHealthInfoDTO> GetNodeHealthWithHttpInfo ()
        {

            var localVarPath = "/node/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeHealthInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeHealthInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeHealthInfoDTO)));
        }

        /// <summary>
        /// Get the node health information Supplies information regarding the connection and services status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeHealthInfoDTO</returns>
        public async System.Threading.Tasks.Task<NodeHealthInfoDTO> GetNodeHealthAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NodeHealthInfoDTO> localVarResponse = await GetNodeHealthWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the node health information Supplies information regarding the connection and services status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeHealthInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeHealthInfoDTO>> GetNodeHealthWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeHealthInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeHealthInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeHealthInfoDTO)));
        }

        /// <summary>
        /// Get the node information Supplies additional information about the application running on a node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeInfoDTO</returns>
        public NodeInfoDTO GetNodeInfo ()
        {
             ApiResponse<NodeInfoDTO> localVarResponse = GetNodeInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the node information Supplies additional information about the application running on a node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeInfoDTO</returns>
        public ApiResponse<NodeInfoDTO> GetNodeInfoWithHttpInfo ()
        {

            var localVarPath = "/node/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeInfoDTO)));
        }

        /// <summary>
        /// Get the node information Supplies additional information about the application running on a node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeInfoDTO</returns>
        public async System.Threading.Tasks.Task<NodeInfoDTO> GetNodeInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NodeInfoDTO> localVarResponse = await GetNodeInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the node information Supplies additional information about the application running on a node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeInfoDTO>> GetNodeInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeInfoDTO)));
        }

        /// <summary>
        /// Get peers information Gets the list of peers visible by the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<NodeInfoDTO></returns>
        public List<NodeInfoDTO> GetNodePeers ()
        {
             ApiResponse<List<NodeInfoDTO>> localVarResponse = GetNodePeersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get peers information Gets the list of peers visible by the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<NodeInfoDTO></returns>
        public ApiResponse<List<NodeInfoDTO>> GetNodePeersWithHttpInfo ()
        {

            var localVarPath = "/node/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodePeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NodeInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NodeInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NodeInfoDTO>)));
        }

        /// <summary>
        /// Get peers information Gets the list of peers visible by the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<NodeInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<NodeInfoDTO>> GetNodePeersAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<NodeInfoDTO>> localVarResponse = await GetNodePeersWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get peers information Gets the list of peers visible by the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;NodeInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NodeInfoDTO>>> GetNodePeersWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodePeers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NodeInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<NodeInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NodeInfoDTO>)));
        }

        /// <summary>
        /// Get the storage information of the node Returns storage information about the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StorageInfoDTO</returns>
        public StorageInfoDTO GetNodeStorage ()
        {
             ApiResponse<StorageInfoDTO> localVarResponse = GetNodeStorageWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the storage information of the node Returns storage information about the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StorageInfoDTO</returns>
        public ApiResponse<StorageInfoDTO> GetNodeStorageWithHttpInfo ()
        {

            var localVarPath = "/node/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StorageInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageInfoDTO)));
        }

        /// <summary>
        /// Get the storage information of the node Returns storage information about the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StorageInfoDTO</returns>
        public async System.Threading.Tasks.Task<StorageInfoDTO> GetNodeStorageAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<StorageInfoDTO> localVarResponse = await GetNodeStorageWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the storage information of the node Returns storage information about the node.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StorageInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StorageInfoDTO>> GetNodeStorageWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StorageInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StorageInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StorageInfoDTO)));
        }

        /// <summary>
        /// Get the node time Gets the node time at the moment the reply was sent and received.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeTimeDTO</returns>
        public NodeTimeDTO GetNodeTime ()
        {
             ApiResponse<NodeTimeDTO> localVarResponse = GetNodeTimeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the node time Gets the node time at the moment the reply was sent and received.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeTimeDTO</returns>
        public ApiResponse<NodeTimeDTO> GetNodeTimeWithHttpInfo ()
        {

            var localVarPath = "/node/time";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeTimeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeTimeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeTimeDTO)));
        }

        /// <summary>
        /// Get the node time Gets the node time at the moment the reply was sent and received.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of NodeTimeDTO</returns>
        public async System.Threading.Tasks.Task<NodeTimeDTO> GetNodeTimeAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<NodeTimeDTO> localVarResponse = await GetNodeTimeWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the node time Gets the node time at the moment the reply was sent and received.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (NodeTimeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeTimeDTO>> GetNodeTimeWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/time";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeTimeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeTimeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeTimeDTO)));
        }

        /// <summary>
        /// Get the version of the running REST component Returns the version of the running catapult-rest component.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServerInfoDTO</returns>
        public ServerInfoDTO GetServerInfo ()
        {
             ApiResponse<ServerInfoDTO> localVarResponse = GetServerInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the version of the running REST component Returns the version of the running catapult-rest component.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServerInfoDTO</returns>
        public ApiResponse<ServerInfoDTO> GetServerInfoWithHttpInfo ()
        {

            var localVarPath = "/node/server";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerInfoDTO)));
        }

        /// <summary>
        /// Get the version of the running REST component Returns the version of the running catapult-rest component.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ServerInfoDTO</returns>
        public async System.Threading.Tasks.Task<ServerInfoDTO> GetServerInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ServerInfoDTO> localVarResponse = await GetServerInfoWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the version of the running REST component Returns the version of the running catapult-rest component.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ServerInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServerInfoDTO>> GetServerInfoWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/server";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServerInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerInfoDTO)));
        }

        /// <summary>
        /// Get the unlocked harvesting account public keys. Returns array of unlocked account public keys.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnlockedAccountDTO</returns>
        public UnlockedAccountDTO GetUnlockedAccount ()
        {
             ApiResponse<UnlockedAccountDTO> localVarResponse = GetUnlockedAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the unlocked harvesting account public keys. Returns array of unlocked account public keys.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnlockedAccountDTO</returns>
        public ApiResponse<UnlockedAccountDTO> GetUnlockedAccountWithHttpInfo ()
        {

            var localVarPath = "/node/unlockedaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnlockedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnlockedAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnlockedAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnlockedAccountDTO)));
        }

        /// <summary>
        /// Get the unlocked harvesting account public keys. Returns array of unlocked account public keys.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UnlockedAccountDTO</returns>
        public async System.Threading.Tasks.Task<UnlockedAccountDTO> GetUnlockedAccountAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UnlockedAccountDTO> localVarResponse = await GetUnlockedAccountWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the unlocked harvesting account public keys. Returns array of unlocked account public keys.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UnlockedAccountDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnlockedAccountDTO>> GetUnlockedAccountWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/node/unlockedaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnlockedAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnlockedAccountDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UnlockedAccountDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnlockedAccountDTO)));
        }

    }
}
