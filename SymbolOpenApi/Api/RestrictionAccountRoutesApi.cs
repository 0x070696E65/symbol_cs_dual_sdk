/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestrictionAccountRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the account restrictions
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>AccountRestrictionsInfoDTO</returns>
        AccountRestrictionsInfoDTO GetAccountRestrictions (string address);

        /// <summary>
        /// Get the account restrictions
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of AccountRestrictionsInfoDTO</returns>
        ApiResponse<AccountRestrictionsInfoDTO> GetAccountRestrictionsWithHttpInfo (string address);
        /// <summary>
        /// Get the account restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions merkle for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetAccountRestrictionsMerkle (string address);

        /// <summary>
        /// Get the account restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions merkle for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetAccountRestrictionsMerkleWithHttpInfo (string address);
        /// <summary>
        /// Search account restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of account restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>AccountRestrictionsPage</returns>
        AccountRestrictionsPage SearchAccountRestrictions (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search account restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of account restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of AccountRestrictionsPage</returns>
        ApiResponse<AccountRestrictionsPage> SearchAccountRestrictionsWithHttpInfo (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the account restrictions
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountRestrictionsInfoDTO</returns>
        System.Threading.Tasks.Task<AccountRestrictionsInfoDTO> GetAccountRestrictionsAsync (string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the account restrictions
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountRestrictionsInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountRestrictionsInfoDTO>> GetAccountRestrictionsWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the account restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions merkle for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetAccountRestrictionsMerkleAsync (string address, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the account restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the account restrictions merkle for a given address.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetAccountRestrictionsMerkleWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search account restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of account restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountRestrictionsPage</returns>
        System.Threading.Tasks.Task<AccountRestrictionsPage> SearchAccountRestrictionsAsync (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search account restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of account restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountRestrictionsPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountRestrictionsPage>> SearchAccountRestrictionsWithHttpInfoAsync (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestrictionAccountRoutesApi : IRestrictionAccountRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionAccountRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestrictionAccountRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionAccountRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RestrictionAccountRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionAccountRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestrictionAccountRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the account restrictions Returns the account restrictions for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>AccountRestrictionsInfoDTO</returns>
        public AccountRestrictionsInfoDTO GetAccountRestrictions (string address)
        {
             ApiResponse<AccountRestrictionsInfoDTO> localVarResponse = GetAccountRestrictionsWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the account restrictions Returns the account restrictions for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of AccountRestrictionsInfoDTO</returns>
        public ApiResponse<AccountRestrictionsInfoDTO> GetAccountRestrictionsWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RestrictionAccountRoutesApi->GetAccountRestrictions");

            var localVarPath = "/restrictions/account/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountRestrictionsInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountRestrictionsInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountRestrictionsInfoDTO)));
        }

        /// <summary>
        /// Get the account restrictions Returns the account restrictions for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountRestrictionsInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccountRestrictionsInfoDTO> GetAccountRestrictionsAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountRestrictionsInfoDTO> localVarResponse = await GetAccountRestrictionsWithHttpInfoAsync(address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the account restrictions Returns the account restrictions for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountRestrictionsInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountRestrictionsInfoDTO>> GetAccountRestrictionsWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RestrictionAccountRoutesApi->GetAccountRestrictions");

            var localVarPath = "/restrictions/account/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountRestrictionsInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountRestrictionsInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountRestrictionsInfoDTO)));
        }

        /// <summary>
        /// Get the account restrictions merkle Returns the account restrictions merkle for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetAccountRestrictionsMerkle (string address)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetAccountRestrictionsMerkleWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the account restrictions merkle Returns the account restrictions merkle for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetAccountRestrictionsMerkleWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RestrictionAccountRoutesApi->GetAccountRestrictionsMerkle");

            var localVarPath = "/restrictions/account/{address}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountRestrictionsMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get the account restrictions merkle Returns the account restrictions merkle for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetAccountRestrictionsMerkleAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetAccountRestrictionsMerkleWithHttpInfoAsync(address, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the account restrictions merkle Returns the account restrictions merkle for a given address.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetAccountRestrictionsMerkleWithHttpInfoAsync (string address, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling RestrictionAccountRoutesApi->GetAccountRestrictionsMerkle");

            var localVarPath = "/restrictions/account/{address}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountRestrictionsMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Search account restrictions Returns an array of account restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>AccountRestrictionsPage</returns>
        public AccountRestrictionsPage SearchAccountRestrictions (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<AccountRestrictionsPage> localVarResponse = SearchAccountRestrictionsWithHttpInfo(address, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search account restrictions Returns an array of account restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of AccountRestrictionsPage</returns>
        public ApiResponse<AccountRestrictionsPage> SearchAccountRestrictionsWithHttpInfo (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/restrictions/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAccountRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountRestrictionsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountRestrictionsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountRestrictionsPage)));
        }

        /// <summary>
        /// Search account restrictions Returns an array of account restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AccountRestrictionsPage</returns>
        public async System.Threading.Tasks.Task<AccountRestrictionsPage> SearchAccountRestrictionsAsync (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AccountRestrictionsPage> localVarResponse = await SearchAccountRestrictionsWithHttpInfoAsync(address, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search account restrictions Returns an array of account restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AccountRestrictionsPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountRestrictionsPage>> SearchAccountRestrictionsWithHttpInfoAsync (string address = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restrictions/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAccountRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountRestrictionsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountRestrictionsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountRestrictionsPage)));
        }

    }
}
