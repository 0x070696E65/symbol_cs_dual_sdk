/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestrictionMosaicRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions for a composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MosaicRestrictionDTO</returns>
        MosaicRestrictionDTO GetMosaicRestrictions (string compositeHash);

        /// <summary>
        /// Get the mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions for a composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MosaicRestrictionDTO</returns>
        ApiResponse<MosaicRestrictionDTO> GetMosaicRestrictionsWithHttpInfo (string compositeHash);
        /// <summary>
        /// Get the mosaic restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetMosaicRestrictionsMerkle (string compositeHash);

        /// <summary>
        /// Get the mosaic restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetMosaicRestrictionsMerkleWithHttpInfo (string compositeHash);
        /// <summary>
        /// Search mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of mosaic restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MosaicRestrictionsPage</returns>
        MosaicRestrictionsPage SearchMosaicRestrictions (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of mosaic restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MosaicRestrictionsPage</returns>
        ApiResponse<MosaicRestrictionsPage> SearchMosaicRestrictionsWithHttpInfo (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions for a composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicRestrictionDTO</returns>
        System.Threading.Tasks.Task<MosaicRestrictionDTO> GetMosaicRestrictionsAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions for a composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicRestrictionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicRestrictionDTO>> GetMosaicRestrictionsWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the mosaic restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMosaicRestrictionsMerkleAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the mosaic restrictions merkle
        /// </summary>
        /// <remarks>
        /// Returns the mosaic restrictions merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMosaicRestrictionsMerkleWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of mosaic restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicRestrictionsPage</returns>
        System.Threading.Tasks.Task<MosaicRestrictionsPage> SearchMosaicRestrictionsAsync (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search mosaic restrictions
        /// </summary>
        /// <remarks>
        /// Returns an array of mosaic restrictions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicRestrictionsPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicRestrictionsPage>> SearchMosaicRestrictionsWithHttpInfoAsync (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestrictionMosaicRoutesApi : IRestrictionMosaicRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionMosaicRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestrictionMosaicRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionMosaicRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RestrictionMosaicRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestrictionMosaicRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestrictionMosaicRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the mosaic restrictions Returns the mosaic restrictions for a composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MosaicRestrictionDTO</returns>
        public MosaicRestrictionDTO GetMosaicRestrictions (string compositeHash)
        {
             ApiResponse<MosaicRestrictionDTO> localVarResponse = GetMosaicRestrictionsWithHttpInfo(compositeHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the mosaic restrictions Returns the mosaic restrictions for a composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MosaicRestrictionDTO</returns>
        public ApiResponse<MosaicRestrictionDTO> GetMosaicRestrictionsWithHttpInfo (string compositeHash)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling RestrictionMosaicRoutesApi->GetMosaicRestrictions");

            var localVarPath = "/restrictions/mosaic/{compositeHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicRestrictionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicRestrictionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicRestrictionDTO)));
        }

        /// <summary>
        /// Get the mosaic restrictions Returns the mosaic restrictions for a composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicRestrictionDTO</returns>
        public async System.Threading.Tasks.Task<MosaicRestrictionDTO> GetMosaicRestrictionsAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MosaicRestrictionDTO> localVarResponse = await GetMosaicRestrictionsWithHttpInfoAsync(compositeHash, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the mosaic restrictions Returns the mosaic restrictions for a composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicRestrictionDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicRestrictionDTO>> GetMosaicRestrictionsWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling RestrictionMosaicRoutesApi->GetMosaicRestrictions");

            var localVarPath = "/restrictions/mosaic/{compositeHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicRestrictionDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicRestrictionDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicRestrictionDTO)));
        }

        /// <summary>
        /// Get the mosaic restrictions merkle Returns the mosaic restrictions merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetMosaicRestrictionsMerkle (string compositeHash)
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = GetMosaicRestrictionsMerkleWithHttpInfo(compositeHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the mosaic restrictions merkle Returns the mosaic restrictions merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetMosaicRestrictionsMerkleWithHttpInfo (string compositeHash)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling RestrictionMosaicRoutesApi->GetMosaicRestrictionsMerkle");

            var localVarPath = "/restrictions/mosaic/{compositeHash}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicRestrictionsMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Get the mosaic restrictions merkle Returns the mosaic restrictions merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMosaicRestrictionsMerkleAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetMosaicRestrictionsMerkleWithHttpInfoAsync(compositeHash, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the mosaic restrictions merkle Returns the mosaic restrictions merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMosaicRestrictionsMerkleWithHttpInfoAsync (string compositeHash, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling RestrictionMosaicRoutesApi->GetMosaicRestrictionsMerkle");

            var localVarPath = "/restrictions/mosaic/{compositeHash}/merkle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (compositeHash != null) localVarPathParams.Add("compositeHash", this.Configuration.ApiClient.ParameterToString(compositeHash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicRestrictionsMerkle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerkleStateInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerkleStateInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerkleStateInfoDTO)));
        }

        /// <summary>
        /// Search mosaic restrictions Returns an array of mosaic restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>MosaicRestrictionsPage</returns>
        public MosaicRestrictionsPage SearchMosaicRestrictions (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<MosaicRestrictionsPage> localVarResponse = SearchMosaicRestrictionsWithHttpInfo(mosaicId, entryType, targetAddress, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search mosaic restrictions Returns an array of mosaic restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of MosaicRestrictionsPage</returns>
        public ApiResponse<MosaicRestrictionsPage> SearchMosaicRestrictionsWithHttpInfo (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/restrictions/mosaic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mosaicId", mosaicId)); // query parameter
            if (entryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryType", entryType)); // query parameter
            if (targetAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAddress", targetAddress)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMosaicRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicRestrictionsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicRestrictionsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicRestrictionsPage)));
        }

        /// <summary>
        /// Search mosaic restrictions Returns an array of mosaic restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MosaicRestrictionsPage</returns>
        public async System.Threading.Tasks.Task<MosaicRestrictionsPage> SearchMosaicRestrictionsAsync (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MosaicRestrictionsPage> localVarResponse = await SearchMosaicRestrictionsWithHttpInfoAsync(mosaicId, entryType, targetAddress, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search mosaic restrictions Returns an array of mosaic restrictions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">Filter by mosaic identifier. (optional)</param>
        /// <param name="entryType">Filter by entry type. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MosaicRestrictionsPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicRestrictionsPage>> SearchMosaicRestrictionsWithHttpInfoAsync (string mosaicId = default(string), MosaicRestrictionEntryTypeEnum? entryType = default(MosaicRestrictionEntryTypeEnum?), string targetAddress = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/restrictions/mosaic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mosaicId", mosaicId)); // query parameter
            if (entryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entryType", entryType)); // query parameter
            if (targetAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAddress", targetAddress)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchMosaicRestrictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicRestrictionsPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MosaicRestrictionsPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicRestrictionsPage)));
        }

    }
}
