/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SymbolOpenApi.Client;
using SymbolOpenApi.Model;

namespace SymbolOpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnounceCosignatureTransaction (Cosignature cosignature);

        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionWithHttpInfo (Cosignature cosignature);
        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnouncePartialTransaction (TransactionPayload transactionPayload);

        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnouncePartialTransactionWithHttpInfo (TransactionPayload transactionPayload);
        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnounceTransaction (TransactionPayload transactionPayload);

        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnounceTransactionWithHttpInfo (TransactionPayload transactionPayload);
        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetConfirmedTransaction (string transactionId);

        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetConfirmedTransactionWithHttpInfo (string transactionId);
        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        List<TransactionInfoDTO> GetConfirmedTransactions (TransactionIds transactionIds);

        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        ApiResponse<List<TransactionInfoDTO>> GetConfirmedTransactionsWithHttpInfo (TransactionIds transactionIds);
        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetPartialTransaction (string transactionId);

        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetPartialTransactionWithHttpInfo (string transactionId);
        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        List<TransactionInfoDTO> GetPartialTransactions (TransactionIds transactionIds);

        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        ApiResponse<List<TransactionInfoDTO>> GetPartialTransactionsWithHttpInfo (TransactionIds transactionIds);
        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetUnconfirmedTransaction (string transactionId);

        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetUnconfirmedTransactionWithHttpInfo (string transactionId);
        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        List<TransactionInfoDTO> GetUnconfirmedTransactions (TransactionIds transactionIds);

        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        ApiResponse<List<TransactionInfoDTO>> GetUnconfirmedTransactionsWithHttpInfo (TransactionIds transactionIds);
        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchConfirmedTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchConfirmedTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchPartialTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchPartialTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchUnconfirmedTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));

        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchUnconfirmedTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionAsync (Cosignature cosignature, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceCosignatureTransactionWithHttpInfoAsync (Cosignature cosignature, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnouncePartialTransactionAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnouncePartialTransactionWithHttpInfoAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceTransactionAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceTransactionWithHttpInfoAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetConfirmedTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetConfirmedTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetConfirmedTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetConfirmedTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetPartialTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetPartialTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetPartialTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetPartialTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetUnconfirmedTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetUnconfirmedTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetUnconfirmedTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetUnconfirmedTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchConfirmedTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchConfirmedTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchPartialTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchPartialTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchUnconfirmedTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchUnconfirmedTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionRoutesApi : ITransactionRoutesApi
    {
        private SymbolOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionRoutesApi(String basePath)
        {
            this.Configuration = new SymbolOpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransactionRoutesApi()
        {
            this.Configuration = SymbolOpenApi.Client.Configuration.Default;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionRoutesApi(SymbolOpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SymbolOpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymbolOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolOpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnounceCosignatureTransaction (Cosignature cosignature)
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnounceCosignatureTransactionWithHttpInfo(cosignature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionWithHttpInfo (Cosignature cosignature)
        {
            // verify the required parameter 'cosignature' is set
            if (cosignature == null)
                throw new ApiException(400, "Missing required parameter 'cosignature' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");

            var localVarPath = "/transactions/cosignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cosignature != null && cosignature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cosignature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cosignature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionAsync (Cosignature cosignature, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnounceCosignatureTransactionWithHttpInfoAsync(cosignature, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceCosignatureTransactionWithHttpInfoAsync (Cosignature cosignature, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'cosignature' is set
            if (cosignature == null)
                throw new ApiException(400, "Missing required parameter 'cosignature' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");

            var localVarPath = "/transactions/cosignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cosignature != null && cosignature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cosignature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cosignature; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnouncePartialTransaction (TransactionPayload transactionPayload)
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnouncePartialTransactionWithHttpInfo(transactionPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnouncePartialTransactionWithHttpInfo (TransactionPayload transactionPayload)
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnouncePartialTransaction");

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionPayload != null && transactionPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionPayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnouncePartialTransactionAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnouncePartialTransactionWithHttpInfoAsync(transactionPayload, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnouncePartialTransactionWithHttpInfoAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnouncePartialTransaction");

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionPayload != null && transactionPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionPayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnounceTransaction (TransactionPayload transactionPayload)
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnounceTransactionWithHttpInfo(transactionPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnounceTransactionWithHttpInfo (TransactionPayload transactionPayload)
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnounceTransaction");

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionPayload != null && transactionPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionPayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceTransactionAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnounceTransactionWithHttpInfoAsync(transactionPayload, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceTransactionWithHttpInfoAsync (TransactionPayload transactionPayload, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnounceTransaction");

            var localVarPath = "/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionPayload != null && transactionPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionPayload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnounceTransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnounceTransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnounceTransactionInfoDTO)));
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetConfirmedTransaction (string transactionId)
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = GetConfirmedTransactionWithHttpInfo(transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetConfirmedTransactionWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetConfirmedTransaction");

            var localVarPath = "/transactions/confirmed/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmedTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetConfirmedTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = await GetConfirmedTransactionWithHttpInfoAsync(transactionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetConfirmedTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetConfirmedTransaction");

            var localVarPath = "/transactions/confirmed/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmedTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        public List<TransactionInfoDTO> GetConfirmedTransactions (TransactionIds transactionIds)
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetConfirmedTransactionsWithHttpInfo(transactionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        public ApiResponse<List<TransactionInfoDTO>> GetConfirmedTransactionsWithHttpInfo (TransactionIds transactionIds)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetConfirmedTransactions");

            var localVarPath = "/transactions/confirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetConfirmedTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetConfirmedTransactionsWithHttpInfoAsync(transactionIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetConfirmedTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetConfirmedTransactions");

            var localVarPath = "/transactions/confirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetPartialTransaction (string transactionId)
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = GetPartialTransactionWithHttpInfo(transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetPartialTransactionWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetPartialTransaction");

            var localVarPath = "/transactions/partial/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetPartialTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = await GetPartialTransactionWithHttpInfoAsync(transactionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetPartialTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetPartialTransaction");

            var localVarPath = "/transactions/partial/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        public List<TransactionInfoDTO> GetPartialTransactions (TransactionIds transactionIds)
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetPartialTransactionsWithHttpInfo(transactionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        public ApiResponse<List<TransactionInfoDTO>> GetPartialTransactionsWithHttpInfo (TransactionIds transactionIds)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetPartialTransactions");

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartialTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetPartialTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetPartialTransactionsWithHttpInfoAsync(transactionIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetPartialTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetPartialTransactions");

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartialTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetUnconfirmedTransaction (string transactionId)
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = GetUnconfirmedTransactionWithHttpInfo(transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetUnconfirmedTransactionWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetUnconfirmedTransaction");

            var localVarPath = "/transactions/unconfirmed/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnconfirmedTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetUnconfirmedTransactionAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionInfoDTO> localVarResponse = await GetUnconfirmedTransactionWithHttpInfoAsync(transactionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetUnconfirmedTransactionWithHttpInfoAsync (string transactionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetUnconfirmedTransaction");

            var localVarPath = "/transactions/unconfirmed/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnconfirmedTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionInfoDTO)));
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>List<TransactionInfoDTO></returns>
        public List<TransactionInfoDTO> GetUnconfirmedTransactions (TransactionIds transactionIds)
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetUnconfirmedTransactionsWithHttpInfo(transactionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <returns>ApiResponse of List<TransactionInfoDTO></returns>
        public ApiResponse<List<TransactionInfoDTO>> GetUnconfirmedTransactionsWithHttpInfo (TransactionIds transactionIds)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetUnconfirmedTransactions");

            var localVarPath = "/transactions/unconfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionInfoDTO></returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetUnconfirmedTransactionsAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetUnconfirmedTransactionsWithHttpInfoAsync(transactionIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetUnconfirmedTransactionsWithHttpInfoAsync (TransactionIds transactionIds, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetUnconfirmedTransactions");

            var localVarPath = "/transactions/unconfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionInfoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchConfirmedTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<TransactionPage> localVarResponse = SearchConfirmedTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchConfirmedTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/transactions/confirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchConfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchConfirmedTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionPage> localVarResponse = await SearchConfirmedTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchConfirmedTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/transactions/confirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchConfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchPartialTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<TransactionPage> localVarResponse = SearchPartialTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchPartialTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchPartialTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchPartialTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionPage> localVarResponse = await SearchPartialTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchPartialTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/transactions/partial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchPartialTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchUnconfirmedTransactions (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {
             ApiResponse<TransactionPage> localVarResponse = SearchUnconfirmedTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchUnconfirmedTransactionsWithHttpInfo (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?))
        {

            var localVarPath = "/transactions/unconfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUnconfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchUnconfirmedTransactionsAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionPage> localVarResponse = await SearchUnconfirmedTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchUnconfirmedTransactionsWithHttpInfoAsync (string address = default(string), string recipientAddress = default(string), string signerPublicKey = default(string), string height = default(string), string fromHeight = default(string), string toHeight = default(string), string fromTransferAmount = default(string), string toTransferAmount = default(string), List<TransactionTypeEnum> type = default(List<TransactionTypeEnum>), bool? embedded = default(bool?), string transferMosaicId = default(string), int? pageSize = default(int?), int? pageNumber = default(int?), string offset = default(string), Order? order = default(Order?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/transactions/unconfirmed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (recipientAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientAddress", recipientAddress)); // query parameter
            if (signerPublicKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signerPublicKey", signerPublicKey)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (fromHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromHeight", fromHeight)); // query parameter
            if (toHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toHeight", toHeight)); // query parameter
            if (fromTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromTransferAmount", fromTransferAmount)); // query parameter
            if (toTransferAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toTransferAmount", toTransferAmount)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "type", type)); // query parameter
            if (embedded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "embedded", embedded)); // query parameter
            if (transferMosaicId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transferMosaicId", transferMosaicId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUnconfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionPage)));
        }

    }
}
