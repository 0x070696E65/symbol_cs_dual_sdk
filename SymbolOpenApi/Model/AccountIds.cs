/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountIds
    /// </summary>
    [DataContract]
    public partial class AccountIds :  IEquatable<AccountIds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountIds" /> class.
        /// </summary>
        /// <param name="publicKeys">Array of public keys..</param>
        /// <param name="addresses">Array of addresses..</param>
        public AccountIds(List<string> publicKeys = default(List<string>), List<string> addresses = default(List<string>))
        {
            this.PublicKeys = publicKeys;
            this.Addresses = addresses;
        }

        /// <summary>
        /// Array of public keys.
        /// </summary>
        /// <value>Array of public keys.</value>
        [DataMember(Name="publicKeys", EmitDefaultValue=false)]
        public List<string> PublicKeys { get; set; }

        /// <summary>
        /// Array of addresses.
        /// </summary>
        /// <value>Array of addresses.</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountIds {\n");
            sb.Append("  PublicKeys: ").Append(PublicKeys).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountIds);
        }

        /// <summary>
        /// Returns true if AccountIds instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountIds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountIds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublicKeys == input.PublicKeys ||
                    this.PublicKeys != null &&
                    input.PublicKeys != null &&
                    this.PublicKeys.SequenceEqual(input.PublicKeys)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicKeys != null)
                    hashCode = hashCode * 59 + this.PublicKeys.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
