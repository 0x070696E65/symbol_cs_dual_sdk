/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// AddressAliasTransactionBodyDTO
    /// </summary>
    [DataContract]
    public partial class AddressAliasTransactionBodyDTO :  IEquatable<AddressAliasTransactionBodyDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AliasAction
        /// </summary>
        [DataMember(Name="aliasAction", EmitDefaultValue=true)]
        public AliasActionEnum AliasAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAliasTransactionBodyDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressAliasTransactionBodyDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressAliasTransactionBodyDTO" /> class.
        /// </summary>
        /// <param name="namespaceId">Namespace identifier. (required).</param>
        /// <param name="address">Address encoded using a 32-character set. (required).</param>
        /// <param name="aliasAction">aliasAction (required).</param>
        public AddressAliasTransactionBodyDTO(string namespaceId = default(string), string address = default(string), AliasActionEnum aliasAction = default(AliasActionEnum))
        {
            // to ensure "namespaceId" is required (not null)
            if (namespaceId == null)
            {
                throw new InvalidDataException("namespaceId is a required property for AddressAliasTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.NamespaceId = namespaceId;
            }

            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for AddressAliasTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            // to ensure "aliasAction" is required (not null)
            if (aliasAction == null)
            {
                throw new InvalidDataException("aliasAction is a required property for AddressAliasTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.AliasAction = aliasAction;
            }

        }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        [DataMember(Name="namespaceId", EmitDefaultValue=true)]
        public string NamespaceId { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressAliasTransactionBodyDTO {\n");
            sb.Append("  NamespaceId: ").Append(NamespaceId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AliasAction: ").Append(AliasAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressAliasTransactionBodyDTO);
        }

        /// <summary>
        /// Returns true if AddressAliasTransactionBodyDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressAliasTransactionBodyDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressAliasTransactionBodyDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NamespaceId == input.NamespaceId ||
                    (this.NamespaceId != null &&
                    this.NamespaceId.Equals(input.NamespaceId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AliasAction == input.AliasAction ||
                    (this.AliasAction != null &&
                    this.AliasAction.Equals(input.AliasAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NamespaceId != null)
                    hashCode = hashCode * 59 + this.NamespaceId.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AliasAction != null)
                    hashCode = hashCode * 59 + this.AliasAction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
