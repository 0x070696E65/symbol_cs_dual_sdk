/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChainInfoDTO
    /// </summary>
    [DataContract]
    public partial class ChainInfoDTO :  IEquatable<ChainInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainInfoDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChainInfoDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainInfoDTO" /> class.
        /// </summary>
        /// <param name="height">Height of the blockchain. (required).</param>
        /// <param name="scoreHigh">Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network.  (required).</param>
        /// <param name="scoreLow">Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network.  (required).</param>
        /// <param name="latestFinalizedBlock">latestFinalizedBlock (required).</param>
        public ChainInfoDTO(string height = default(string), string scoreHigh = default(string), string scoreLow = default(string), FinalizedBlockDTO latestFinalizedBlock = default(FinalizedBlockDTO))
        {
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for ChainInfoDTO and cannot be null");
            }
            else
            {
                this.Height = height;
            }

            // to ensure "scoreHigh" is required (not null)
            if (scoreHigh == null)
            {
                throw new InvalidDataException("scoreHigh is a required property for ChainInfoDTO and cannot be null");
            }
            else
            {
                this.ScoreHigh = scoreHigh;
            }

            // to ensure "scoreLow" is required (not null)
            if (scoreLow == null)
            {
                throw new InvalidDataException("scoreLow is a required property for ChainInfoDTO and cannot be null");
            }
            else
            {
                this.ScoreLow = scoreLow;
            }

            // to ensure "latestFinalizedBlock" is required (not null)
            if (latestFinalizedBlock == null)
            {
                throw new InvalidDataException("latestFinalizedBlock is a required property for ChainInfoDTO and cannot be null");
            }
            else
            {
                this.LatestFinalizedBlock = latestFinalizedBlock;
            }

        }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        [DataMember(Name="height", EmitDefaultValue=true)]
        public string Height { get; set; }

        /// <summary>
        /// Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. 
        /// </summary>
        /// <value>Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. </value>
        [DataMember(Name="scoreHigh", EmitDefaultValue=true)]
        public string ScoreHigh { get; set; }

        /// <summary>
        /// Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. 
        /// </summary>
        /// <value>Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. </value>
        [DataMember(Name="scoreLow", EmitDefaultValue=true)]
        public string ScoreLow { get; set; }

        /// <summary>
        /// Gets or Sets LatestFinalizedBlock
        /// </summary>
        [DataMember(Name="latestFinalizedBlock", EmitDefaultValue=true)]
        public FinalizedBlockDTO LatestFinalizedBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChainInfoDTO {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ScoreHigh: ").Append(ScoreHigh).Append("\n");
            sb.Append("  ScoreLow: ").Append(ScoreLow).Append("\n");
            sb.Append("  LatestFinalizedBlock: ").Append(LatestFinalizedBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChainInfoDTO);
        }

        /// <summary>
        /// Returns true if ChainInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ChainInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChainInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.ScoreHigh == input.ScoreHigh ||
                    (this.ScoreHigh != null &&
                    this.ScoreHigh.Equals(input.ScoreHigh))
                ) && 
                (
                    this.ScoreLow == input.ScoreLow ||
                    (this.ScoreLow != null &&
                    this.ScoreLow.Equals(input.ScoreLow))
                ) && 
                (
                    this.LatestFinalizedBlock == input.LatestFinalizedBlock ||
                    (this.LatestFinalizedBlock != null &&
                    this.LatestFinalizedBlock.Equals(input.LatestFinalizedBlock))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.ScoreHigh != null)
                    hashCode = hashCode * 59 + this.ScoreHigh.GetHashCode();
                if (this.ScoreLow != null)
                    hashCode = hashCode * 59 + this.ScoreLow.GetHashCode();
                if (this.LatestFinalizedBlock != null)
                    hashCode = hashCode * 59 + this.LatestFinalizedBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
