/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// ImportanceBlockDTOAllOf
    /// </summary>
    [DataContract]
    public partial class ImportanceBlockDTOAllOf :  IEquatable<ImportanceBlockDTOAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportanceBlockDTOAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportanceBlockDTOAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportanceBlockDTOAllOf" /> class.
        /// </summary>
        /// <param name="votingEligibleAccountsCount">A number that allows uint 32 values. (required).</param>
        /// <param name="harvestingEligibleAccountsCount">A number that allows uint 64 values represented with a string. (required).</param>
        /// <param name="totalVotingBalance">Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). (required).</param>
        /// <param name="previousImportanceBlockHash">previousImportanceBlockHash (required).</param>
        public ImportanceBlockDTOAllOf(long votingEligibleAccountsCount = default(long), string harvestingEligibleAccountsCount = default(string), string totalVotingBalance = default(string), string previousImportanceBlockHash = default(string))
        {
            // to ensure "votingEligibleAccountsCount" is required (not null)
            if (votingEligibleAccountsCount == null)
            {
                throw new InvalidDataException("votingEligibleAccountsCount is a required property for ImportanceBlockDTOAllOf and cannot be null");
            }
            else
            {
                this.VotingEligibleAccountsCount = votingEligibleAccountsCount;
            }

            // to ensure "harvestingEligibleAccountsCount" is required (not null)
            if (harvestingEligibleAccountsCount == null)
            {
                throw new InvalidDataException("harvestingEligibleAccountsCount is a required property for ImportanceBlockDTOAllOf and cannot be null");
            }
            else
            {
                this.HarvestingEligibleAccountsCount = harvestingEligibleAccountsCount;
            }

            // to ensure "totalVotingBalance" is required (not null)
            if (totalVotingBalance == null)
            {
                throw new InvalidDataException("totalVotingBalance is a required property for ImportanceBlockDTOAllOf and cannot be null");
            }
            else
            {
                this.TotalVotingBalance = totalVotingBalance;
            }

            // to ensure "previousImportanceBlockHash" is required (not null)
            if (previousImportanceBlockHash == null)
            {
                throw new InvalidDataException("previousImportanceBlockHash is a required property for ImportanceBlockDTOAllOf and cannot be null");
            }
            else
            {
                this.PreviousImportanceBlockHash = previousImportanceBlockHash;
            }

        }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        [DataMember(Name="votingEligibleAccountsCount", EmitDefaultValue=true)]
        public long VotingEligibleAccountsCount { get; set; }

        /// <summary>
        /// A number that allows uint 64 values represented with a string.
        /// </summary>
        /// <value>A number that allows uint 64 values represented with a string.</value>
        [DataMember(Name="harvestingEligibleAccountsCount", EmitDefaultValue=true)]
        public string HarvestingEligibleAccountsCount { get; set; }

        /// <summary>
        /// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
        /// </summary>
        /// <value>Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).</value>
        [DataMember(Name="totalVotingBalance", EmitDefaultValue=true)]
        public string TotalVotingBalance { get; set; }

        /// <summary>
        /// Gets or Sets PreviousImportanceBlockHash
        /// </summary>
        [DataMember(Name="previousImportanceBlockHash", EmitDefaultValue=true)]
        public string PreviousImportanceBlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportanceBlockDTOAllOf {\n");
            sb.Append("  VotingEligibleAccountsCount: ").Append(VotingEligibleAccountsCount).Append("\n");
            sb.Append("  HarvestingEligibleAccountsCount: ").Append(HarvestingEligibleAccountsCount).Append("\n");
            sb.Append("  TotalVotingBalance: ").Append(TotalVotingBalance).Append("\n");
            sb.Append("  PreviousImportanceBlockHash: ").Append(PreviousImportanceBlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportanceBlockDTOAllOf);
        }

        /// <summary>
        /// Returns true if ImportanceBlockDTOAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportanceBlockDTOAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportanceBlockDTOAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VotingEligibleAccountsCount == input.VotingEligibleAccountsCount ||
                    (this.VotingEligibleAccountsCount != null &&
                    this.VotingEligibleAccountsCount.Equals(input.VotingEligibleAccountsCount))
                ) && 
                (
                    this.HarvestingEligibleAccountsCount == input.HarvestingEligibleAccountsCount ||
                    (this.HarvestingEligibleAccountsCount != null &&
                    this.HarvestingEligibleAccountsCount.Equals(input.HarvestingEligibleAccountsCount))
                ) && 
                (
                    this.TotalVotingBalance == input.TotalVotingBalance ||
                    (this.TotalVotingBalance != null &&
                    this.TotalVotingBalance.Equals(input.TotalVotingBalance))
                ) && 
                (
                    this.PreviousImportanceBlockHash == input.PreviousImportanceBlockHash ||
                    (this.PreviousImportanceBlockHash != null &&
                    this.PreviousImportanceBlockHash.Equals(input.PreviousImportanceBlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VotingEligibleAccountsCount != null)
                    hashCode = hashCode * 59 + this.VotingEligibleAccountsCount.GetHashCode();
                if (this.HarvestingEligibleAccountsCount != null)
                    hashCode = hashCode * 59 + this.HarvestingEligibleAccountsCount.GetHashCode();
                if (this.TotalVotingBalance != null)
                    hashCode = hashCode * 59 + this.TotalVotingBalance.GetHashCode();
                if (this.PreviousImportanceBlockHash != null)
                    hashCode = hashCode * 59 + this.PreviousImportanceBlockHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
