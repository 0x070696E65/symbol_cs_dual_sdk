/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// The merkle path information clients can use to proof the state of the given entity. 
    /// </summary>
    [DataContract]
    public partial class MerkleStateInfoDTO :  IEquatable<MerkleStateInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleStateInfoDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerkleStateInfoDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleStateInfoDTO" /> class.
        /// </summary>
        /// <param name="raw">The hex information of the complete merkle tree as returned by server api. More information can be found in chapter 4.3 of the catapult whitepaper.  (required).</param>
        /// <param name="tree">Merkle tree parsed from merkle tree raw. (required).</param>
        public MerkleStateInfoDTO(string raw = default(string), List<MerkleStateInfoDTOTreeInner> tree = default(List<MerkleStateInfoDTOTreeInner>))
        {
            // to ensure "raw" is required (not null)
            if (raw == null)
            {
                throw new InvalidDataException("raw is a required property for MerkleStateInfoDTO and cannot be null");
            }
            else
            {
                this.Raw = raw;
            }

            // to ensure "tree" is required (not null)
            if (tree == null)
            {
                throw new InvalidDataException("tree is a required property for MerkleStateInfoDTO and cannot be null");
            }
            else
            {
                this.Tree = tree;
            }

        }

        /// <summary>
        /// The hex information of the complete merkle tree as returned by server api. More information can be found in chapter 4.3 of the catapult whitepaper. 
        /// </summary>
        /// <value>The hex information of the complete merkle tree as returned by server api. More information can be found in chapter 4.3 of the catapult whitepaper. </value>
        [DataMember(Name="raw", EmitDefaultValue=true)]
        public string Raw { get; set; }

        /// <summary>
        /// Merkle tree parsed from merkle tree raw.
        /// </summary>
        /// <value>Merkle tree parsed from merkle tree raw.</value>
        [DataMember(Name="tree", EmitDefaultValue=true)]
        public List<MerkleStateInfoDTOTreeInner> Tree { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerkleStateInfoDTO {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Tree: ").Append(Tree).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerkleStateInfoDTO);
        }

        /// <summary>
        /// Returns true if MerkleStateInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MerkleStateInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerkleStateInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.Tree == input.Tree ||
                    this.Tree != null &&
                    input.Tree != null &&
                    this.Tree.SequenceEqual(input.Tree)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Raw != null)
                    hashCode = hashCode * 59 + this.Raw.GetHashCode();
                if (this.Tree != null)
                    hashCode = hashCode * 59 + this.Tree.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
