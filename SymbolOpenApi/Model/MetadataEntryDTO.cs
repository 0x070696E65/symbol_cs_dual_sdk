/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MetadataEntryDTO
    /// </summary>
    [DataContract]
    public partial class MetadataEntryDTO :  IEquatable<MetadataEntryDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets MetadataType
        /// </summary>
        [DataMember(Name="metadataType", EmitDefaultValue=true)]
        public MetadataTypeEnum MetadataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataEntryDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataEntryDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataEntryDTO" /> class.
        /// </summary>
        /// <param name="version">The version of the state (required).</param>
        /// <param name="compositeHash">compositeHash (required).</param>
        /// <param name="sourceAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="targetAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="scopedMetadataKey">Metadata key scoped to source, target and type expressed. (required).</param>
        /// <param name="targetId">targetId.</param>
        /// <param name="metadataType">metadataType (required).</param>
        /// <param name="value">Metadata value. (required).</param>
        public MetadataEntryDTO(int version = default(int), string compositeHash = default(string), string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), MetadataEntryDTOTargetId targetId = default(MetadataEntryDTOTargetId), MetadataTypeEnum metadataType = default(MetadataTypeEnum), string value = default(string))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this._Version = version;
            }

            // to ensure "compositeHash" is required (not null)
            if (compositeHash == null)
            {
                throw new InvalidDataException("compositeHash is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.CompositeHash = compositeHash;
            }

            // to ensure "sourceAddress" is required (not null)
            if (sourceAddress == null)
            {
                throw new InvalidDataException("sourceAddress is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.SourceAddress = sourceAddress;
            }

            // to ensure "targetAddress" is required (not null)
            if (targetAddress == null)
            {
                throw new InvalidDataException("targetAddress is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.TargetAddress = targetAddress;
            }

            // to ensure "scopedMetadataKey" is required (not null)
            if (scopedMetadataKey == null)
            {
                throw new InvalidDataException("scopedMetadataKey is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.ScopedMetadataKey = scopedMetadataKey;
            }

            // to ensure "metadataType" is required (not null)
            if (metadataType == null)
            {
                throw new InvalidDataException("metadataType is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.MetadataType = metadataType;
            }

            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MetadataEntryDTO and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            this.TargetId = targetId;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int _Version { get; set; }

        /// <summary>
        /// Gets or Sets CompositeHash
        /// </summary>
        [DataMember(Name="compositeHash", EmitDefaultValue=true)]
        public string CompositeHash { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        [DataMember(Name="sourceAddress", EmitDefaultValue=true)]
        public string SourceAddress { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        [DataMember(Name="targetAddress", EmitDefaultValue=true)]
        public string TargetAddress { get; set; }

        /// <summary>
        /// Metadata key scoped to source, target and type expressed.
        /// </summary>
        /// <value>Metadata key scoped to source, target and type expressed.</value>
        [DataMember(Name="scopedMetadataKey", EmitDefaultValue=true)]
        public string ScopedMetadataKey { get; set; }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public MetadataEntryDTOTargetId TargetId { get; set; }


        /// <summary>
        /// Metadata value.
        /// </summary>
        /// <value>Metadata value.</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetadataEntryDTO {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  CompositeHash: ").Append(CompositeHash).Append("\n");
            sb.Append("  SourceAddress: ").Append(SourceAddress).Append("\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("  ScopedMetadataKey: ").Append(ScopedMetadataKey).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  MetadataType: ").Append(MetadataType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetadataEntryDTO);
        }

        /// <summary>
        /// Returns true if MetadataEntryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MetadataEntryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadataEntryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.CompositeHash == input.CompositeHash ||
                    (this.CompositeHash != null &&
                    this.CompositeHash.Equals(input.CompositeHash))
                ) && 
                (
                    this.SourceAddress == input.SourceAddress ||
                    (this.SourceAddress != null &&
                    this.SourceAddress.Equals(input.SourceAddress))
                ) && 
                (
                    this.TargetAddress == input.TargetAddress ||
                    (this.TargetAddress != null &&
                    this.TargetAddress.Equals(input.TargetAddress))
                ) && 
                (
                    this.ScopedMetadataKey == input.ScopedMetadataKey ||
                    (this.ScopedMetadataKey != null &&
                    this.ScopedMetadataKey.Equals(input.ScopedMetadataKey))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.MetadataType == input.MetadataType ||
                    (this.MetadataType != null &&
                    this.MetadataType.Equals(input.MetadataType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.CompositeHash != null)
                    hashCode = hashCode * 59 + this.CompositeHash.GetHashCode();
                if (this.SourceAddress != null)
                    hashCode = hashCode * 59 + this.SourceAddress.GetHashCode();
                if (this.TargetAddress != null)
                    hashCode = hashCode * 59 + this.TargetAddress.GetHashCode();
                if (this.ScopedMetadataKey != null)
                    hashCode = hashCode * 59 + this.ScopedMetadataKey.GetHashCode();
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.MetadataType != null)
                    hashCode = hashCode * 59 + this.MetadataType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
