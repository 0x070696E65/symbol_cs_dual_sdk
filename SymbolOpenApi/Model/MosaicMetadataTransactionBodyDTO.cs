/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// MosaicMetadataTransactionBodyDTO
    /// </summary>
    [DataContract]
    public partial class MosaicMetadataTransactionBodyDTO :  IEquatable<MosaicMetadataTransactionBodyDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicMetadataTransactionBodyDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MosaicMetadataTransactionBodyDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicMetadataTransactionBodyDTO" /> class.
        /// </summary>
        /// <param name="targetAddress">Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA  (required).</param>
        /// <param name="scopedMetadataKey">Metadata key scoped to source, target and type expressed. (required).</param>
        /// <param name="targetMosaicId">Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier.  (required).</param>
        /// <param name="valueSizeDelta">Change in value size in bytes. (required).</param>
        /// <param name="valueSize">A number that allows uint 32 values. (required).</param>
        /// <param name="value">Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value). (required).</param>
        public MosaicMetadataTransactionBodyDTO(string targetAddress = default(string), string scopedMetadataKey = default(string), string targetMosaicId = default(string), int valueSizeDelta = default(int), long valueSize = default(long), string value = default(string))
        {
            // to ensure "targetAddress" is required (not null)
            if (targetAddress == null)
            {
                throw new InvalidDataException("targetAddress is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.TargetAddress = targetAddress;
            }

            // to ensure "scopedMetadataKey" is required (not null)
            if (scopedMetadataKey == null)
            {
                throw new InvalidDataException("scopedMetadataKey is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.ScopedMetadataKey = scopedMetadataKey;
            }

            // to ensure "targetMosaicId" is required (not null)
            if (targetMosaicId == null)
            {
                throw new InvalidDataException("targetMosaicId is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.TargetMosaicId = targetMosaicId;
            }

            // to ensure "valueSizeDelta" is required (not null)
            if (valueSizeDelta == null)
            {
                throw new InvalidDataException("valueSizeDelta is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.ValueSizeDelta = valueSizeDelta;
            }

            // to ensure "valueSize" is required (not null)
            if (valueSize == null)
            {
                throw new InvalidDataException("valueSize is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.ValueSize = valueSize;
            }

            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MosaicMetadataTransactionBodyDTO and cannot be null");
            }
            else
            {
                this.Value = value;
            }

        }

        /// <summary>
        /// Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA 
        /// </summary>
        /// <value>Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA </value>
        [DataMember(Name="targetAddress", EmitDefaultValue=true)]
        public string TargetAddress { get; set; }

        /// <summary>
        /// Metadata key scoped to source, target and type expressed.
        /// </summary>
        /// <value>Metadata key scoped to source, target and type expressed.</value>
        [DataMember(Name="scopedMetadataKey", EmitDefaultValue=true)]
        public string ScopedMetadataKey { get; set; }

        /// <summary>
        /// Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. 
        /// </summary>
        /// <value>Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. </value>
        [DataMember(Name="targetMosaicId", EmitDefaultValue=true)]
        public string TargetMosaicId { get; set; }

        /// <summary>
        /// Change in value size in bytes.
        /// </summary>
        /// <value>Change in value size in bytes.</value>
        [DataMember(Name="valueSizeDelta", EmitDefaultValue=true)]
        public int ValueSizeDelta { get; set; }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        [DataMember(Name="valueSize", EmitDefaultValue=true)]
        public long ValueSize { get; set; }

        /// <summary>
        /// Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).
        /// </summary>
        /// <value>Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MosaicMetadataTransactionBodyDTO {\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("  ScopedMetadataKey: ").Append(ScopedMetadataKey).Append("\n");
            sb.Append("  TargetMosaicId: ").Append(TargetMosaicId).Append("\n");
            sb.Append("  ValueSizeDelta: ").Append(ValueSizeDelta).Append("\n");
            sb.Append("  ValueSize: ").Append(ValueSize).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MosaicMetadataTransactionBodyDTO);
        }

        /// <summary>
        /// Returns true if MosaicMetadataTransactionBodyDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MosaicMetadataTransactionBodyDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MosaicMetadataTransactionBodyDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetAddress == input.TargetAddress ||
                    (this.TargetAddress != null &&
                    this.TargetAddress.Equals(input.TargetAddress))
                ) && 
                (
                    this.ScopedMetadataKey == input.ScopedMetadataKey ||
                    (this.ScopedMetadataKey != null &&
                    this.ScopedMetadataKey.Equals(input.ScopedMetadataKey))
                ) && 
                (
                    this.TargetMosaicId == input.TargetMosaicId ||
                    (this.TargetMosaicId != null &&
                    this.TargetMosaicId.Equals(input.TargetMosaicId))
                ) && 
                (
                    this.ValueSizeDelta == input.ValueSizeDelta ||
                    (this.ValueSizeDelta != null &&
                    this.ValueSizeDelta.Equals(input.ValueSizeDelta))
                ) && 
                (
                    this.ValueSize == input.ValueSize ||
                    (this.ValueSize != null &&
                    this.ValueSize.Equals(input.ValueSize))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetAddress != null)
                    hashCode = hashCode * 59 + this.TargetAddress.GetHashCode();
                if (this.ScopedMetadataKey != null)
                    hashCode = hashCode * 59 + this.ScopedMetadataKey.GetHashCode();
                if (this.TargetMosaicId != null)
                    hashCode = hashCode * 59 + this.TargetMosaicId.GetHashCode();
                if (this.ValueSizeDelta != null)
                    hashCode = hashCode * 59 + this.ValueSizeDelta.GetHashCode();
                if (this.ValueSize != null)
                    hashCode = hashCode * 59 + this.ValueSize.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
