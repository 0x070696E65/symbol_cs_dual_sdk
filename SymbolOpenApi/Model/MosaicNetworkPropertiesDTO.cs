/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// MosaicNetworkPropertiesDTO
    /// </summary>
    [DataContract]
    public partial class MosaicNetworkPropertiesDTO :  IEquatable<MosaicNetworkPropertiesDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicNetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="maxMosaicsPerAccount">Maximum number of mosaics that an account can own..</param>
        /// <param name="maxMosaicDuration">Maximum mosaic duration..</param>
        /// <param name="maxMosaicDivisibility">Maximum mosaic divisibility..</param>
        /// <param name="mosaicRentalFeeSinkAddress">Address encoded using a 32-character set..</param>
        /// <param name="mosaicRentalFee">Mosaic rental fee..</param>
        public MosaicNetworkPropertiesDTO(string maxMosaicsPerAccount = default(string), string maxMosaicDuration = default(string), string maxMosaicDivisibility = default(string), string mosaicRentalFeeSinkAddress = default(string), string mosaicRentalFee = default(string))
        {
            this.MaxMosaicsPerAccount = maxMosaicsPerAccount;
            this.MaxMosaicDuration = maxMosaicDuration;
            this.MaxMosaicDivisibility = maxMosaicDivisibility;
            this.MosaicRentalFeeSinkAddress = mosaicRentalFeeSinkAddress;
            this.MosaicRentalFee = mosaicRentalFee;
        }

        /// <summary>
        /// Maximum number of mosaics that an account can own.
        /// </summary>
        /// <value>Maximum number of mosaics that an account can own.</value>
        [DataMember(Name="maxMosaicsPerAccount", EmitDefaultValue=false)]
        public string MaxMosaicsPerAccount { get; set; }

        /// <summary>
        /// Maximum mosaic duration.
        /// </summary>
        /// <value>Maximum mosaic duration.</value>
        [DataMember(Name="maxMosaicDuration", EmitDefaultValue=false)]
        public string MaxMosaicDuration { get; set; }

        /// <summary>
        /// Maximum mosaic divisibility.
        /// </summary>
        /// <value>Maximum mosaic divisibility.</value>
        [DataMember(Name="maxMosaicDivisibility", EmitDefaultValue=false)]
        public string MaxMosaicDivisibility { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        [DataMember(Name="mosaicRentalFeeSinkAddress", EmitDefaultValue=false)]
        public string MosaicRentalFeeSinkAddress { get; set; }

        /// <summary>
        /// Mosaic rental fee.
        /// </summary>
        /// <value>Mosaic rental fee.</value>
        [DataMember(Name="mosaicRentalFee", EmitDefaultValue=false)]
        public string MosaicRentalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MosaicNetworkPropertiesDTO {\n");
            sb.Append("  MaxMosaicsPerAccount: ").Append(MaxMosaicsPerAccount).Append("\n");
            sb.Append("  MaxMosaicDuration: ").Append(MaxMosaicDuration).Append("\n");
            sb.Append("  MaxMosaicDivisibility: ").Append(MaxMosaicDivisibility).Append("\n");
            sb.Append("  MosaicRentalFeeSinkAddress: ").Append(MosaicRentalFeeSinkAddress).Append("\n");
            sb.Append("  MosaicRentalFee: ").Append(MosaicRentalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MosaicNetworkPropertiesDTO);
        }

        /// <summary>
        /// Returns true if MosaicNetworkPropertiesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MosaicNetworkPropertiesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MosaicNetworkPropertiesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxMosaicsPerAccount == input.MaxMosaicsPerAccount ||
                    (this.MaxMosaicsPerAccount != null &&
                    this.MaxMosaicsPerAccount.Equals(input.MaxMosaicsPerAccount))
                ) && 
                (
                    this.MaxMosaicDuration == input.MaxMosaicDuration ||
                    (this.MaxMosaicDuration != null &&
                    this.MaxMosaicDuration.Equals(input.MaxMosaicDuration))
                ) && 
                (
                    this.MaxMosaicDivisibility == input.MaxMosaicDivisibility ||
                    (this.MaxMosaicDivisibility != null &&
                    this.MaxMosaicDivisibility.Equals(input.MaxMosaicDivisibility))
                ) && 
                (
                    this.MosaicRentalFeeSinkAddress == input.MosaicRentalFeeSinkAddress ||
                    (this.MosaicRentalFeeSinkAddress != null &&
                    this.MosaicRentalFeeSinkAddress.Equals(input.MosaicRentalFeeSinkAddress))
                ) && 
                (
                    this.MosaicRentalFee == input.MosaicRentalFee ||
                    (this.MosaicRentalFee != null &&
                    this.MosaicRentalFee.Equals(input.MosaicRentalFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxMosaicsPerAccount != null)
                    hashCode = hashCode * 59 + this.MaxMosaicsPerAccount.GetHashCode();
                if (this.MaxMosaicDuration != null)
                    hashCode = hashCode * 59 + this.MaxMosaicDuration.GetHashCode();
                if (this.MaxMosaicDivisibility != null)
                    hashCode = hashCode * 59 + this.MaxMosaicDivisibility.GetHashCode();
                if (this.MosaicRentalFeeSinkAddress != null)
                    hashCode = hashCode * 59 + this.MosaicRentalFeeSinkAddress.GetHashCode();
                if (this.MosaicRentalFee != null)
                    hashCode = hashCode * 59 + this.MosaicRentalFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
