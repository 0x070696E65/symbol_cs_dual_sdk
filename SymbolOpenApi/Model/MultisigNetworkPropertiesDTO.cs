/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MultisigNetworkPropertiesDTO
    /// </summary>
    [DataContract]
    public partial class MultisigNetworkPropertiesDTO :  IEquatable<MultisigNetworkPropertiesDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigNetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="maxMultisigDepth">Maximum number of multisig levels..</param>
        /// <param name="maxCosignatoriesPerAccount">Maximum number of cosignatories per account..</param>
        /// <param name="maxCosignedAccountsPerAccount">Maximum number of accounts a single account can cosign..</param>
        public MultisigNetworkPropertiesDTO(string maxMultisigDepth = default(string), string maxCosignatoriesPerAccount = default(string), string maxCosignedAccountsPerAccount = default(string))
        {
            this.MaxMultisigDepth = maxMultisigDepth;
            this.MaxCosignatoriesPerAccount = maxCosignatoriesPerAccount;
            this.MaxCosignedAccountsPerAccount = maxCosignedAccountsPerAccount;
        }

        /// <summary>
        /// Maximum number of multisig levels.
        /// </summary>
        /// <value>Maximum number of multisig levels.</value>
        [DataMember(Name="maxMultisigDepth", EmitDefaultValue=false)]
        public string MaxMultisigDepth { get; set; }

        /// <summary>
        /// Maximum number of cosignatories per account.
        /// </summary>
        /// <value>Maximum number of cosignatories per account.</value>
        [DataMember(Name="maxCosignatoriesPerAccount", EmitDefaultValue=false)]
        public string MaxCosignatoriesPerAccount { get; set; }

        /// <summary>
        /// Maximum number of accounts a single account can cosign.
        /// </summary>
        /// <value>Maximum number of accounts a single account can cosign.</value>
        [DataMember(Name="maxCosignedAccountsPerAccount", EmitDefaultValue=false)]
        public string MaxCosignedAccountsPerAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultisigNetworkPropertiesDTO {\n");
            sb.Append("  MaxMultisigDepth: ").Append(MaxMultisigDepth).Append("\n");
            sb.Append("  MaxCosignatoriesPerAccount: ").Append(MaxCosignatoriesPerAccount).Append("\n");
            sb.Append("  MaxCosignedAccountsPerAccount: ").Append(MaxCosignedAccountsPerAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultisigNetworkPropertiesDTO);
        }

        /// <summary>
        /// Returns true if MultisigNetworkPropertiesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MultisigNetworkPropertiesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultisigNetworkPropertiesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxMultisigDepth == input.MaxMultisigDepth ||
                    (this.MaxMultisigDepth != null &&
                    this.MaxMultisigDepth.Equals(input.MaxMultisigDepth))
                ) && 
                (
                    this.MaxCosignatoriesPerAccount == input.MaxCosignatoriesPerAccount ||
                    (this.MaxCosignatoriesPerAccount != null &&
                    this.MaxCosignatoriesPerAccount.Equals(input.MaxCosignatoriesPerAccount))
                ) && 
                (
                    this.MaxCosignedAccountsPerAccount == input.MaxCosignedAccountsPerAccount ||
                    (this.MaxCosignedAccountsPerAccount != null &&
                    this.MaxCosignedAccountsPerAccount.Equals(input.MaxCosignedAccountsPerAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxMultisigDepth != null)
                    hashCode = hashCode * 59 + this.MaxMultisigDepth.GetHashCode();
                if (this.MaxCosignatoriesPerAccount != null)
                    hashCode = hashCode * 59 + this.MaxCosignatoriesPerAccount.GetHashCode();
                if (this.MaxCosignedAccountsPerAccount != null)
                    hashCode = hashCode * 59 + this.MaxCosignedAccountsPerAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
