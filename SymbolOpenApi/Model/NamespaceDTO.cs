/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// NamespaceDTO
    /// </summary>
    [DataContract]
    public partial class NamespaceDTO :  IEquatable<NamespaceDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [DataMember(Name="registrationType", EmitDefaultValue=true)]
        public NamespaceRegistrationTypeEnum RegistrationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NamespaceDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceDTO" /> class.
        /// </summary>
        /// <param name="version">The version of the state (required).</param>
        /// <param name="registrationType">registrationType (required).</param>
        /// <param name="depth">Level of the namespace. (required).</param>
        /// <param name="level0">Namespace identifier. (required).</param>
        /// <param name="level1">Namespace identifier..</param>
        /// <param name="level2">Namespace identifier..</param>
        /// <param name="alias">alias (required).</param>
        /// <param name="parentId">Namespace identifier. (required).</param>
        /// <param name="ownerAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="startHeight">Height of the blockchain. (required).</param>
        /// <param name="endHeight">Height of the blockchain. (required).</param>
        public NamespaceDTO(int version = default(int), NamespaceRegistrationTypeEnum registrationType = default(NamespaceRegistrationTypeEnum), int depth = default(int), string level0 = default(string), string level1 = default(string), string level2 = default(string), AliasDTO alias = default(AliasDTO), string parentId = default(string), string ownerAddress = default(string), string startHeight = default(string), string endHeight = default(string))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this._Version = version;
            }

            // to ensure "registrationType" is required (not null)
            if (registrationType == null)
            {
                throw new InvalidDataException("registrationType is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.RegistrationType = registrationType;
            }

            // to ensure "depth" is required (not null)
            if (depth == null)
            {
                throw new InvalidDataException("depth is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.Depth = depth;
            }

            // to ensure "level0" is required (not null)
            if (level0 == null)
            {
                throw new InvalidDataException("level0 is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.Level0 = level0;
            }

            // to ensure "alias" is required (not null)
            if (alias == null)
            {
                throw new InvalidDataException("alias is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.Alias = alias;
            }

            // to ensure "parentId" is required (not null)
            if (parentId == null)
            {
                throw new InvalidDataException("parentId is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.ParentId = parentId;
            }

            // to ensure "ownerAddress" is required (not null)
            if (ownerAddress == null)
            {
                throw new InvalidDataException("ownerAddress is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.OwnerAddress = ownerAddress;
            }

            // to ensure "startHeight" is required (not null)
            if (startHeight == null)
            {
                throw new InvalidDataException("startHeight is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.StartHeight = startHeight;
            }

            // to ensure "endHeight" is required (not null)
            if (endHeight == null)
            {
                throw new InvalidDataException("endHeight is a required property for NamespaceDTO and cannot be null");
            }
            else
            {
                this.EndHeight = endHeight;
            }

            this.Level1 = level1;
            this.Level2 = level2;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int _Version { get; set; }


        /// <summary>
        /// Level of the namespace.
        /// </summary>
        /// <value>Level of the namespace.</value>
        [DataMember(Name="depth", EmitDefaultValue=true)]
        public int Depth { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        [DataMember(Name="level0", EmitDefaultValue=true)]
        public string Level0 { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        [DataMember(Name="level1", EmitDefaultValue=false)]
        public string Level1 { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        [DataMember(Name="level2", EmitDefaultValue=false)]
        public string Level2 { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="alias", EmitDefaultValue=true)]
        public AliasDTO Alias { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        [DataMember(Name="parentId", EmitDefaultValue=true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        [DataMember(Name="ownerAddress", EmitDefaultValue=true)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        [DataMember(Name="startHeight", EmitDefaultValue=true)]
        public string StartHeight { get; set; }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        [DataMember(Name="endHeight", EmitDefaultValue=true)]
        public string EndHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NamespaceDTO {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Level0: ").Append(Level0).Append("\n");
            sb.Append("  Level1: ").Append(Level1).Append("\n");
            sb.Append("  Level2: ").Append(Level2).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("  StartHeight: ").Append(StartHeight).Append("\n");
            sb.Append("  EndHeight: ").Append(EndHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NamespaceDTO);
        }

        /// <summary>
        /// Returns true if NamespaceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NamespaceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamespaceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.RegistrationType == input.RegistrationType ||
                    (this.RegistrationType != null &&
                    this.RegistrationType.Equals(input.RegistrationType))
                ) && 
                (
                    this.Depth == input.Depth ||
                    (this.Depth != null &&
                    this.Depth.Equals(input.Depth))
                ) && 
                (
                    this.Level0 == input.Level0 ||
                    (this.Level0 != null &&
                    this.Level0.Equals(input.Level0))
                ) && 
                (
                    this.Level1 == input.Level1 ||
                    (this.Level1 != null &&
                    this.Level1.Equals(input.Level1))
                ) && 
                (
                    this.Level2 == input.Level2 ||
                    (this.Level2 != null &&
                    this.Level2.Equals(input.Level2))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OwnerAddress == input.OwnerAddress ||
                    (this.OwnerAddress != null &&
                    this.OwnerAddress.Equals(input.OwnerAddress))
                ) && 
                (
                    this.StartHeight == input.StartHeight ||
                    (this.StartHeight != null &&
                    this.StartHeight.Equals(input.StartHeight))
                ) && 
                (
                    this.EndHeight == input.EndHeight ||
                    (this.EndHeight != null &&
                    this.EndHeight.Equals(input.EndHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.RegistrationType != null)
                    hashCode = hashCode * 59 + this.RegistrationType.GetHashCode();
                if (this.Depth != null)
                    hashCode = hashCode * 59 + this.Depth.GetHashCode();
                if (this.Level0 != null)
                    hashCode = hashCode * 59 + this.Level0.GetHashCode();
                if (this.Level1 != null)
                    hashCode = hashCode * 59 + this.Level1.GetHashCode();
                if (this.Level2 != null)
                    hashCode = hashCode * 59 + this.Level2.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.OwnerAddress != null)
                    hashCode = hashCode * 59 + this.OwnerAddress.GetHashCode();
                if (this.StartHeight != null)
                    hashCode = hashCode * 59 + this.StartHeight.GetHashCode();
                if (this.EndHeight != null)
                    hashCode = hashCode * 59 + this.EndHeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
