/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Network related configuration properties.
    /// </summary>
    [DataContract]
    public partial class NetworkPropertiesDTO :  IEquatable<NetworkPropertiesDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets NodeEqualityStrategy
        /// </summary>
        [DataMember(Name="nodeEqualityStrategy", EmitDefaultValue=false)]
        public NodeIdentityEqualityStrategy? NodeEqualityStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="identifier">Network identifier..</param>
        /// <param name="nodeEqualityStrategy">nodeEqualityStrategy.</param>
        /// <param name="nemesisSignerPublicKey">Public key..</param>
        /// <param name="generationHashSeed">generationHashSeed.</param>
        /// <param name="epochAdjustment">Nemesis epoch time adjustment..</param>
        public NetworkPropertiesDTO(string identifier = default(string), NodeIdentityEqualityStrategy? nodeEqualityStrategy = default(NodeIdentityEqualityStrategy?), string nemesisSignerPublicKey = default(string), string generationHashSeed = default(string), string epochAdjustment = default(string))
        {
            this.Identifier = identifier;
            this.NodeEqualityStrategy = nodeEqualityStrategy;
            this.NemesisSignerPublicKey = nemesisSignerPublicKey;
            this.GenerationHashSeed = generationHashSeed;
            this.EpochAdjustment = epochAdjustment;
        }

        /// <summary>
        /// Network identifier.
        /// </summary>
        /// <value>Network identifier.</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }


        /// <summary>
        /// Public key.
        /// </summary>
        /// <value>Public key.</value>
        [DataMember(Name="nemesisSignerPublicKey", EmitDefaultValue=false)]
        public string NemesisSignerPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets GenerationHashSeed
        /// </summary>
        [DataMember(Name="generationHashSeed", EmitDefaultValue=false)]
        public string GenerationHashSeed { get; set; }

        /// <summary>
        /// Nemesis epoch time adjustment.
        /// </summary>
        /// <value>Nemesis epoch time adjustment.</value>
        [DataMember(Name="epochAdjustment", EmitDefaultValue=false)]
        public string EpochAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkPropertiesDTO {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  NodeEqualityStrategy: ").Append(NodeEqualityStrategy).Append("\n");
            sb.Append("  NemesisSignerPublicKey: ").Append(NemesisSignerPublicKey).Append("\n");
            sb.Append("  GenerationHashSeed: ").Append(GenerationHashSeed).Append("\n");
            sb.Append("  EpochAdjustment: ").Append(EpochAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkPropertiesDTO);
        }

        /// <summary>
        /// Returns true if NetworkPropertiesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkPropertiesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkPropertiesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.NodeEqualityStrategy == input.NodeEqualityStrategy ||
                    (this.NodeEqualityStrategy != null &&
                    this.NodeEqualityStrategy.Equals(input.NodeEqualityStrategy))
                ) && 
                (
                    this.NemesisSignerPublicKey == input.NemesisSignerPublicKey ||
                    (this.NemesisSignerPublicKey != null &&
                    this.NemesisSignerPublicKey.Equals(input.NemesisSignerPublicKey))
                ) && 
                (
                    this.GenerationHashSeed == input.GenerationHashSeed ||
                    (this.GenerationHashSeed != null &&
                    this.GenerationHashSeed.Equals(input.GenerationHashSeed))
                ) && 
                (
                    this.EpochAdjustment == input.EpochAdjustment ||
                    (this.EpochAdjustment != null &&
                    this.EpochAdjustment.Equals(input.EpochAdjustment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.NodeEqualityStrategy != null)
                    hashCode = hashCode * 59 + this.NodeEqualityStrategy.GetHashCode();
                if (this.NemesisSignerPublicKey != null)
                    hashCode = hashCode * 59 + this.NemesisSignerPublicKey.GetHashCode();
                if (this.GenerationHashSeed != null)
                    hashCode = hashCode * 59 + this.GenerationHashSeed.GetHashCode();
                if (this.EpochAdjustment != null)
                    hashCode = hashCode * 59 + this.EpochAdjustment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
