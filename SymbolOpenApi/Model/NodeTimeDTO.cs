/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// NodeTimeDTO
    /// </summary>
    [DataContract]
    public partial class NodeTimeDTO :  IEquatable<NodeTimeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeTimeDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NodeTimeDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeTimeDTO" /> class.
        /// </summary>
        /// <param name="communicationTimestamps">communicationTimestamps (required).</param>
        public NodeTimeDTO(CommunicationTimestampsDTO communicationTimestamps = default(CommunicationTimestampsDTO))
        {
            // to ensure "communicationTimestamps" is required (not null)
            if (communicationTimestamps == null)
            {
                throw new InvalidDataException("communicationTimestamps is a required property for NodeTimeDTO and cannot be null");
            }
            else
            {
                this.CommunicationTimestamps = communicationTimestamps;
            }

        }

        /// <summary>
        /// Gets or Sets CommunicationTimestamps
        /// </summary>
        [DataMember(Name="communicationTimestamps", EmitDefaultValue=true)]
        public CommunicationTimestampsDTO CommunicationTimestamps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeTimeDTO {\n");
            sb.Append("  CommunicationTimestamps: ").Append(CommunicationTimestamps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeTimeDTO);
        }

        /// <summary>
        /// Returns true if NodeTimeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeTimeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeTimeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommunicationTimestamps == input.CommunicationTimestamps ||
                    (this.CommunicationTimestamps != null &&
                    this.CommunicationTimestamps.Equals(input.CommunicationTimestamps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommunicationTimestamps != null)
                    hashCode = hashCode * 59 + this.CommunicationTimestamps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
