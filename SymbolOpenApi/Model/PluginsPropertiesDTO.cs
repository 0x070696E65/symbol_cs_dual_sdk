/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// Plugin related configuration properties.
    /// </summary>
    [DataContract]
    public partial class PluginsPropertiesDTO :  IEquatable<PluginsPropertiesDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsPropertiesDTO" /> class.
        /// </summary>
        /// <param name="accountlink">accountlink.</param>
        /// <param name="aggregate">aggregate.</param>
        /// <param name="lockhash">lockhash.</param>
        /// <param name="locksecret">locksecret.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="mosaic">mosaic.</param>
        /// <param name="multisig">multisig.</param>
        /// <param name="_namespace">_namespace.</param>
        /// <param name="restrictionaccount">restrictionaccount.</param>
        /// <param name="restrictionmosaic">restrictionmosaic.</param>
        /// <param name="transfer">transfer.</param>
        public PluginsPropertiesDTO(AccountKeyLinkNetworkPropertiesDTO accountlink = default(AccountKeyLinkNetworkPropertiesDTO), AggregateNetworkPropertiesDTO aggregate = default(AggregateNetworkPropertiesDTO), HashLockNetworkPropertiesDTO lockhash = default(HashLockNetworkPropertiesDTO), SecretLockNetworkPropertiesDTO locksecret = default(SecretLockNetworkPropertiesDTO), MetadataNetworkPropertiesDTO metadata = default(MetadataNetworkPropertiesDTO), MosaicNetworkPropertiesDTO mosaic = default(MosaicNetworkPropertiesDTO), MultisigNetworkPropertiesDTO multisig = default(MultisigNetworkPropertiesDTO), NamespaceNetworkPropertiesDTO _namespace = default(NamespaceNetworkPropertiesDTO), AccountRestrictionNetworkPropertiesDTO restrictionaccount = default(AccountRestrictionNetworkPropertiesDTO), MosaicRestrictionNetworkPropertiesDTO restrictionmosaic = default(MosaicRestrictionNetworkPropertiesDTO), TransferNetworkPropertiesDTO transfer = default(TransferNetworkPropertiesDTO))
        {
            this.Accountlink = accountlink;
            this.Aggregate = aggregate;
            this.Lockhash = lockhash;
            this.Locksecret = locksecret;
            this.Metadata = metadata;
            this.Mosaic = mosaic;
            this.Multisig = multisig;
            this.Namespace = _namespace;
            this.Restrictionaccount = restrictionaccount;
            this.Restrictionmosaic = restrictionmosaic;
            this.Transfer = transfer;
        }

        /// <summary>
        /// Gets or Sets Accountlink
        /// </summary>
        [DataMember(Name="accountlink", EmitDefaultValue=false)]
        public AccountKeyLinkNetworkPropertiesDTO Accountlink { get; set; }

        /// <summary>
        /// Gets or Sets Aggregate
        /// </summary>
        [DataMember(Name="aggregate", EmitDefaultValue=false)]
        public AggregateNetworkPropertiesDTO Aggregate { get; set; }

        /// <summary>
        /// Gets or Sets Lockhash
        /// </summary>
        [DataMember(Name="lockhash", EmitDefaultValue=false)]
        public HashLockNetworkPropertiesDTO Lockhash { get; set; }

        /// <summary>
        /// Gets or Sets Locksecret
        /// </summary>
        [DataMember(Name="locksecret", EmitDefaultValue=false)]
        public SecretLockNetworkPropertiesDTO Locksecret { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public MetadataNetworkPropertiesDTO Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Mosaic
        /// </summary>
        [DataMember(Name="mosaic", EmitDefaultValue=false)]
        public MosaicNetworkPropertiesDTO Mosaic { get; set; }

        /// <summary>
        /// Gets or Sets Multisig
        /// </summary>
        [DataMember(Name="multisig", EmitDefaultValue=false)]
        public MultisigNetworkPropertiesDTO Multisig { get; set; }

        /// <summary>
        /// Gets or Sets Namespace
        /// </summary>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public NamespaceNetworkPropertiesDTO Namespace { get; set; }

        /// <summary>
        /// Gets or Sets Restrictionaccount
        /// </summary>
        [DataMember(Name="restrictionaccount", EmitDefaultValue=false)]
        public AccountRestrictionNetworkPropertiesDTO Restrictionaccount { get; set; }

        /// <summary>
        /// Gets or Sets Restrictionmosaic
        /// </summary>
        [DataMember(Name="restrictionmosaic", EmitDefaultValue=false)]
        public MosaicRestrictionNetworkPropertiesDTO Restrictionmosaic { get; set; }

        /// <summary>
        /// Gets or Sets Transfer
        /// </summary>
        [DataMember(Name="transfer", EmitDefaultValue=false)]
        public TransferNetworkPropertiesDTO Transfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginsPropertiesDTO {\n");
            sb.Append("  Accountlink: ").Append(Accountlink).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Lockhash: ").Append(Lockhash).Append("\n");
            sb.Append("  Locksecret: ").Append(Locksecret).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Mosaic: ").Append(Mosaic).Append("\n");
            sb.Append("  Multisig: ").Append(Multisig).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Restrictionaccount: ").Append(Restrictionaccount).Append("\n");
            sb.Append("  Restrictionmosaic: ").Append(Restrictionmosaic).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginsPropertiesDTO);
        }

        /// <summary>
        /// Returns true if PluginsPropertiesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginsPropertiesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginsPropertiesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accountlink == input.Accountlink ||
                    (this.Accountlink != null &&
                    this.Accountlink.Equals(input.Accountlink))
                ) && 
                (
                    this.Aggregate == input.Aggregate ||
                    (this.Aggregate != null &&
                    this.Aggregate.Equals(input.Aggregate))
                ) && 
                (
                    this.Lockhash == input.Lockhash ||
                    (this.Lockhash != null &&
                    this.Lockhash.Equals(input.Lockhash))
                ) && 
                (
                    this.Locksecret == input.Locksecret ||
                    (this.Locksecret != null &&
                    this.Locksecret.Equals(input.Locksecret))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Mosaic == input.Mosaic ||
                    (this.Mosaic != null &&
                    this.Mosaic.Equals(input.Mosaic))
                ) && 
                (
                    this.Multisig == input.Multisig ||
                    (this.Multisig != null &&
                    this.Multisig.Equals(input.Multisig))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Restrictionaccount == input.Restrictionaccount ||
                    (this.Restrictionaccount != null &&
                    this.Restrictionaccount.Equals(input.Restrictionaccount))
                ) && 
                (
                    this.Restrictionmosaic == input.Restrictionmosaic ||
                    (this.Restrictionmosaic != null &&
                    this.Restrictionmosaic.Equals(input.Restrictionmosaic))
                ) && 
                (
                    this.Transfer == input.Transfer ||
                    (this.Transfer != null &&
                    this.Transfer.Equals(input.Transfer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accountlink != null)
                    hashCode = hashCode * 59 + this.Accountlink.GetHashCode();
                if (this.Aggregate != null)
                    hashCode = hashCode * 59 + this.Aggregate.GetHashCode();
                if (this.Lockhash != null)
                    hashCode = hashCode * 59 + this.Lockhash.GetHashCode();
                if (this.Locksecret != null)
                    hashCode = hashCode * 59 + this.Locksecret.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Mosaic != null)
                    hashCode = hashCode * 59 + this.Mosaic.GetHashCode();
                if (this.Multisig != null)
                    hashCode = hashCode * 59 + this.Multisig.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.Restrictionaccount != null)
                    hashCode = hashCode * 59 + this.Restrictionaccount.GetHashCode();
                if (this.Restrictionmosaic != null)
                    hashCode = hashCode * 59 + this.Restrictionmosaic.GetHashCode();
                if (this.Transfer != null)
                    hashCode = hashCode * 59 + this.Transfer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
