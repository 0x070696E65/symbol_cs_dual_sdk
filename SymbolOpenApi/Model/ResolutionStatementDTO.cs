/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolOpenApi.Client.OpenAPIDateConverter;

namespace SymbolOpenApi.Model
{
    /// <summary>
    /// ResolutionStatementDTO
    /// </summary>
    [DataContract]
    public partial class ResolutionStatementDTO :  IEquatable<ResolutionStatementDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionStatementDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResolutionStatementDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolutionStatementDTO" /> class.
        /// </summary>
        /// <param name="height">Height of the blockchain. (required).</param>
        /// <param name="unresolved">unresolved (required).</param>
        /// <param name="resolutionEntries">Array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single resolution entry since within one block the resolution might change for different sources due to alias related transactions.  (required).</param>
        public ResolutionStatementDTO(string height = default(string), ResolutionStatementDTOUnresolved unresolved = default(ResolutionStatementDTOUnresolved), List<ResolutionEntryDTO> resolutionEntries = default(List<ResolutionEntryDTO>))
        {
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for ResolutionStatementDTO and cannot be null");
            }
            else
            {
                this.Height = height;
            }

            // to ensure "unresolved" is required (not null)
            if (unresolved == null)
            {
                throw new InvalidDataException("unresolved is a required property for ResolutionStatementDTO and cannot be null");
            }
            else
            {
                this.Unresolved = unresolved;
            }

            // to ensure "resolutionEntries" is required (not null)
            if (resolutionEntries == null)
            {
                throw new InvalidDataException("resolutionEntries is a required property for ResolutionStatementDTO and cannot be null");
            }
            else
            {
                this.ResolutionEntries = resolutionEntries;
            }

        }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        [DataMember(Name="height", EmitDefaultValue=true)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets Unresolved
        /// </summary>
        [DataMember(Name="unresolved", EmitDefaultValue=true)]
        public ResolutionStatementDTOUnresolved Unresolved { get; set; }

        /// <summary>
        /// Array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single resolution entry since within one block the resolution might change for different sources due to alias related transactions. 
        /// </summary>
        /// <value>Array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single resolution entry since within one block the resolution might change for different sources due to alias related transactions. </value>
        [DataMember(Name="resolutionEntries", EmitDefaultValue=true)]
        public List<ResolutionEntryDTO> ResolutionEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResolutionStatementDTO {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Unresolved: ").Append(Unresolved).Append("\n");
            sb.Append("  ResolutionEntries: ").Append(ResolutionEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResolutionStatementDTO);
        }

        /// <summary>
        /// Returns true if ResolutionStatementDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ResolutionStatementDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResolutionStatementDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Unresolved == input.Unresolved ||
                    (this.Unresolved != null &&
                    this.Unresolved.Equals(input.Unresolved))
                ) && 
                (
                    this.ResolutionEntries == input.ResolutionEntries ||
                    this.ResolutionEntries != null &&
                    input.ResolutionEntries != null &&
                    this.ResolutionEntries.SequenceEqual(input.ResolutionEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Unresolved != null)
                    hashCode = hashCode * 59 + this.Unresolved.GetHashCode();
                if (this.ResolutionEntries != null)
                    hashCode = hashCode * 59 + this.ResolutionEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
