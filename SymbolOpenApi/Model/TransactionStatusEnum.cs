/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// List of status errors that can be returned via the status channel after announcing a transaction: * Success * Neutral * Failure * Failure_Core_Past_Deadline - Validation failed because the deadline passed. * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future. * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance. * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block. * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block. * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified. * Failure_Core_Invalid_Address - Validation failed because an address is invalid. * Failure_Core_Invalid_Version - Validation failed because entity version is invalid. * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid. * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester. * Failure_Core_Zero_Address - Validation failed because an address is zero. * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero. * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero. * Failure_Core_Address_Collision - Validation failed because an address collision is detected. * Failure_Core_Importance_Block_Mismatch - Validation failed because the block does not match the schema of an importance block. * Failure_Core_Unexpected_Block_Type - Validation failed because the block type is unexpected. * Failure_Core_Block_Explicit_Transactions_Hash_Mismatch - Validation failed because a block did not have the expected transactions hash at a specified height. * Failure_Core_Invalid_Link_Action - Validation failed because link action is invalid. * Failure_Core_Link_Already_Exists - Validation failed because main account is already linked to another account. * Failure_Core_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link. * Failure_Core_Invalid_Link_Range - Validation failed because link range is invalid. * Failure_Core_Too_Many_Links - Validation failed because main account has too many links of the specified type. * Failure_Core_Link_Start_Epoch_Invalid - Validation failed because the start epoch is invalid. * Failure_Hash_Already_Exists * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed. * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account. * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link. * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account. * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible account to remote. * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction. * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate in the transaction. * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions. * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions. * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures. * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present. * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible. * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing. * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not match the calculated value. * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic. * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount. * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache. * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache. * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive. * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long. * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid. * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache. * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large. * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof. * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown. * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive. * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match. * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long. * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small. * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large. * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude than the value size. * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected value based on the current state. * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible. * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value. * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid. * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don&#39;t match. * Failure_Mosaic_Expired - Validation failed because the parent is expired. * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner. * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce. * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id. * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid. * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid. * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid. * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid. * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid. * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid. * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed. * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes. * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable. * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative. * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value. * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable. * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of different mosaics an account is allowed to own. * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag unset. * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed. * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present. * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant. * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache. * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present. * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory. * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range. * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories. * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid. * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts. * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of cosignatories. * Failure_Multisig_Loop - Validation failed because a multisig loop is created. * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded. * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig account. * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value. * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid. * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don&#39;t match. * Failure_Namespace_Expired - Validation failed because the parent is expired. * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner. * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce. * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid. * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name. * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth. * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown. * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists. * Failure_Namespace_Already_Active - Validation failed because the namespace is already active. * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block. * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded. * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid. * Failure_Namespace_Unknown - Validation failed because namespace does not exist. * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias. * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias. * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing alias. * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing alias. * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid. * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid. * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid. * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid. * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified in the notification. * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant. * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container. * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications. * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications. * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many values. * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid. * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the transaction are not allowed to interact. * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the recipient. * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be initiated by the signer. * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid. * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current value. * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero. * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be exceeded. * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be deleted. * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist. * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction. * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic. * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large. * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order. * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain. * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit. * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash. * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash. * Failure_Chain_Block_Invalid_Vrf_Proof - Validation failed because the Vrf proof is invalid. * Failure_Chain_Block_Unknown_Signer - Validation failed because the block signer is unknown. * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full. * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty. * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value. * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache. * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks. * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked. * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions. * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain. * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match the calculated difficulties. * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better. * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind. * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future. * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a batch operation. * Failure_Consumer_Remote_Chain_Improper_Importance_Link - Validation failed because the remote chain has an improper importance link. * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache. * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed. * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded. 
    /// </summary>
    /// <value>List of status errors that can be returned via the status channel after announcing a transaction: * Success * Neutral * Failure * Failure_Core_Past_Deadline - Validation failed because the deadline passed. * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future. * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance. * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block. * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block. * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified. * Failure_Core_Invalid_Address - Validation failed because an address is invalid. * Failure_Core_Invalid_Version - Validation failed because entity version is invalid. * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid. * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester. * Failure_Core_Zero_Address - Validation failed because an address is zero. * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero. * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero. * Failure_Core_Address_Collision - Validation failed because an address collision is detected. * Failure_Core_Importance_Block_Mismatch - Validation failed because the block does not match the schema of an importance block. * Failure_Core_Unexpected_Block_Type - Validation failed because the block type is unexpected. * Failure_Core_Block_Explicit_Transactions_Hash_Mismatch - Validation failed because a block did not have the expected transactions hash at a specified height. * Failure_Core_Invalid_Link_Action - Validation failed because link action is invalid. * Failure_Core_Link_Already_Exists - Validation failed because main account is already linked to another account. * Failure_Core_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link. * Failure_Core_Invalid_Link_Range - Validation failed because link range is invalid. * Failure_Core_Too_Many_Links - Validation failed because main account has too many links of the specified type. * Failure_Core_Link_Start_Epoch_Invalid - Validation failed because the start epoch is invalid. * Failure_Hash_Already_Exists * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed. * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account. * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link. * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account. * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible account to remote. * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction. * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate in the transaction. * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions. * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions. * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures. * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present. * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible. * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing. * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not match the calculated value. * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic. * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount. * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache. * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache. * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive. * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long. * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid. * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache. * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large. * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof. * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown. * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive. * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match. * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long. * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small. * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large. * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude than the value size. * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected value based on the current state. * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible. * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value. * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid. * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don&#39;t match. * Failure_Mosaic_Expired - Validation failed because the parent is expired. * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner. * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce. * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id. * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid. * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid. * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid. * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid. * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid. * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid. * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed. * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes. * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable. * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative. * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value. * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable. * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of different mosaics an account is allowed to own. * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag unset. * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed. * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present. * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant. * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache. * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present. * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory. * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range. * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories. * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid. * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts. * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of cosignatories. * Failure_Multisig_Loop - Validation failed because a multisig loop is created. * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded. * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig account. * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value. * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid. * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don&#39;t match. * Failure_Namespace_Expired - Validation failed because the parent is expired. * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner. * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce. * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid. * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name. * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth. * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown. * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists. * Failure_Namespace_Already_Active - Validation failed because the namespace is already active. * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block. * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded. * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid. * Failure_Namespace_Unknown - Validation failed because namespace does not exist. * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias. * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias. * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing alias. * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing alias. * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid. * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid. * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid. * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid. * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified in the notification. * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant. * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container. * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications. * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications. * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many values. * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid. * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the transaction are not allowed to interact. * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the recipient. * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be initiated by the signer. * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid. * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current value. * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero. * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be exceeded. * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be deleted. * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist. * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction. * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic. * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large. * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order. * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain. * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit. * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash. * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash. * Failure_Chain_Block_Invalid_Vrf_Proof - Validation failed because the Vrf proof is invalid. * Failure_Chain_Block_Unknown_Signer - Validation failed because the block signer is unknown. * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full. * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty. * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value. * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache. * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks. * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked. * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions. * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain. * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match the calculated difficulties. * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better. * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind. * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future. * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a batch operation. * Failure_Consumer_Remote_Chain_Improper_Importance_Link - Validation failed because the remote chain has an improper importance link. * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache. * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed. * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded. </value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum TransactionStatusEnum
    {
        /// <summary>
        /// Enum Success for value: Success
        /// </summary>
        [EnumMember(Value = "Success")]
        Success = 1,

        /// <summary>
        /// Enum Neutral for value: Neutral
        /// </summary>
        [EnumMember(Value = "Neutral")]
        Neutral = 2,

        /// <summary>
        /// Enum Failure for value: Failure
        /// </summary>
        [EnumMember(Value = "Failure")]
        Failure = 3,

        /// <summary>
        /// Enum FailureCorePastDeadline for value: Failure_Core_Past_Deadline
        /// </summary>
        [EnumMember(Value = "Failure_Core_Past_Deadline")]
        FailureCorePastDeadline = 4,

        /// <summary>
        /// Enum FailureCoreFutureDeadline for value: Failure_Core_Future_Deadline
        /// </summary>
        [EnumMember(Value = "Failure_Core_Future_Deadline")]
        FailureCoreFutureDeadline = 5,

        /// <summary>
        /// Enum FailureCoreInsufficientBalance for value: Failure_Core_Insufficient_Balance
        /// </summary>
        [EnumMember(Value = "Failure_Core_Insufficient_Balance")]
        FailureCoreInsufficientBalance = 6,

        /// <summary>
        /// Enum FailureCoreTooManyTransactions for value: Failure_Core_Too_Many_Transactions
        /// </summary>
        [EnumMember(Value = "Failure_Core_Too_Many_Transactions")]
        FailureCoreTooManyTransactions = 7,

        /// <summary>
        /// Enum FailureCoreNemesisAccountSignedAfterNemesisBlock for value: Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block
        /// </summary>
        [EnumMember(Value = "Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block")]
        FailureCoreNemesisAccountSignedAfterNemesisBlock = 8,

        /// <summary>
        /// Enum FailureCoreWrongNetwork for value: Failure_Core_Wrong_Network
        /// </summary>
        [EnumMember(Value = "Failure_Core_Wrong_Network")]
        FailureCoreWrongNetwork = 9,

        /// <summary>
        /// Enum FailureCoreInvalidAddress for value: Failure_Core_Invalid_Address
        /// </summary>
        [EnumMember(Value = "Failure_Core_Invalid_Address")]
        FailureCoreInvalidAddress = 10,

        /// <summary>
        /// Enum FailureCoreInvalidVersion for value: Failure_Core_Invalid_Version
        /// </summary>
        [EnumMember(Value = "Failure_Core_Invalid_Version")]
        FailureCoreInvalidVersion = 11,

        /// <summary>
        /// Enum FailureCoreInvalidTransactionFee for value: Failure_Core_Invalid_Transaction_Fee
        /// </summary>
        [EnumMember(Value = "Failure_Core_Invalid_Transaction_Fee")]
        FailureCoreInvalidTransactionFee = 12,

        /// <summary>
        /// Enum FailureCoreBlockHarvesterIneligible for value: Failure_Core_Block_Harvester_Ineligible
        /// </summary>
        [EnumMember(Value = "Failure_Core_Block_Harvester_Ineligible")]
        FailureCoreBlockHarvesterIneligible = 13,

        /// <summary>
        /// Enum FailureCoreZeroAddress for value: Failure_Core_Zero_Address
        /// </summary>
        [EnumMember(Value = "Failure_Core_Zero_Address")]
        FailureCoreZeroAddress = 14,

        /// <summary>
        /// Enum FailureCoreZeroPublicKey for value: Failure_Core_Zero_Public_Key
        /// </summary>
        [EnumMember(Value = "Failure_Core_Zero_Public_Key")]
        FailureCoreZeroPublicKey = 15,

        /// <summary>
        /// Enum FailureCoreNonzeroInternalPadding for value: Failure_Core_Nonzero_Internal_Padding
        /// </summary>
        [EnumMember(Value = "Failure_Core_Nonzero_Internal_Padding")]
        FailureCoreNonzeroInternalPadding = 16,

        /// <summary>
        /// Enum FailureCoreAddressCollision for value: Failure_Core_Address_Collision
        /// </summary>
        [EnumMember(Value = "Failure_Core_Address_Collision")]
        FailureCoreAddressCollision = 17,

        /// <summary>
        /// Enum FailureCoreImportanceBlockMismatch for value: Failure_Core_Importance_Block_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Core_Importance_Block_Mismatch")]
        FailureCoreImportanceBlockMismatch = 18,

        /// <summary>
        /// Enum FailureCoreUnexpectedBlockType for value: Failure_Core_Unexpected_Block_Type
        /// </summary>
        [EnumMember(Value = "Failure_Core_Unexpected_Block_Type")]
        FailureCoreUnexpectedBlockType = 19,

        /// <summary>
        /// Enum FailureCoreBlockExplicitTransactionsHashMismatch for value: Failure_Core_Block_Explicit_Transactions_Hash_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Core_Block_Explicit_Transactions_Hash_Mismatch")]
        FailureCoreBlockExplicitTransactionsHashMismatch = 20,

        /// <summary>
        /// Enum FailureCoreInvalidLinkAction for value: Failure_Core_Invalid_Link_Action
        /// </summary>
        [EnumMember(Value = "Failure_Core_Invalid_Link_Action")]
        FailureCoreInvalidLinkAction = 21,

        /// <summary>
        /// Enum FailureCoreLinkAlreadyExists for value: Failure_Core_Link_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_Core_Link_Already_Exists")]
        FailureCoreLinkAlreadyExists = 22,

        /// <summary>
        /// Enum FailureCoreInconsistentUnlinkData for value: Failure_Core_Inconsistent_Unlink_Data
        /// </summary>
        [EnumMember(Value = "Failure_Core_Inconsistent_Unlink_Data")]
        FailureCoreInconsistentUnlinkData = 23,

        /// <summary>
        /// Enum FailureCoreInvalidLinkRange for value: Failure_Core_Invalid_Link_Range
        /// </summary>
        [EnumMember(Value = "Failure_Core_Invalid_Link_Range")]
        FailureCoreInvalidLinkRange = 24,

        /// <summary>
        /// Enum FailureCoreTooManyLinks for value: Failure_Core_Too_Many_Links
        /// </summary>
        [EnumMember(Value = "Failure_Core_Too_Many_Links")]
        FailureCoreTooManyLinks = 25,

        /// <summary>
        /// Enum FailureCoreLinkStartEpochInvalid for value: Failure_Core_Link_Start_Epoch_Invalid
        /// </summary>
        [EnumMember(Value = "Failure_Core_Link_Start_Epoch_Invalid")]
        FailureCoreLinkStartEpochInvalid = 26,

        /// <summary>
        /// Enum FailureHashAlreadyExists for value: Failure_Hash_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_Hash_Already_Exists")]
        FailureHashAlreadyExists = 27,

        /// <summary>
        /// Enum FailureSignatureNotVerifiable for value: Failure_Signature_Not_Verifiable
        /// </summary>
        [EnumMember(Value = "Failure_Signature_Not_Verifiable")]
        FailureSignatureNotVerifiable = 28,

        /// <summary>
        /// Enum FailureAccountLinkLinkAlreadyExists for value: Failure_AccountLink_Link_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Link_Already_Exists")]
        FailureAccountLinkLinkAlreadyExists = 29,

        /// <summary>
        /// Enum FailureAccountLinkInconsistentUnlinkData for value: Failure_AccountLink_Inconsistent_Unlink_Data
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Inconsistent_Unlink_Data")]
        FailureAccountLinkInconsistentUnlinkData = 30,

        /// <summary>
        /// Enum FailureAccountLinkUnknownLink for value: Failure_AccountLink_Unknown_Link
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Unknown_Link")]
        FailureAccountLinkUnknownLink = 31,

        /// <summary>
        /// Enum FailureAccountLinkRemoteAccountIneligible for value: Failure_AccountLink_Remote_Account_Ineligible
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Remote_Account_Ineligible")]
        FailureAccountLinkRemoteAccountIneligible = 32,

        /// <summary>
        /// Enum FailureAccountLinkRemoteAccountSignerProhibited for value: Failure_AccountLink_Remote_Account_Signer_Prohibited
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Remote_Account_Signer_Prohibited")]
        FailureAccountLinkRemoteAccountSignerProhibited = 33,

        /// <summary>
        /// Enum FailureAccountLinkRemoteAccountParticipantProhibited for value: Failure_AccountLink_Remote_Account_Participant_Prohibited
        /// </summary>
        [EnumMember(Value = "Failure_AccountLink_Remote_Account_Participant_Prohibited")]
        FailureAccountLinkRemoteAccountParticipantProhibited = 34,

        /// <summary>
        /// Enum FailureAggregateTooManyTransactions for value: Failure_Aggregate_Too_Many_Transactions
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Too_Many_Transactions")]
        FailureAggregateTooManyTransactions = 35,

        /// <summary>
        /// Enum FailureAggregateNoTransactions for value: Failure_Aggregate_No_Transactions
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_No_Transactions")]
        FailureAggregateNoTransactions = 36,

        /// <summary>
        /// Enum FailureAggregateTooManyCosignatures for value: Failure_Aggregate_Too_Many_Cosignatures
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Too_Many_Cosignatures")]
        FailureAggregateTooManyCosignatures = 37,

        /// <summary>
        /// Enum FailureAggregateRedundantCosignatures for value: Failure_Aggregate_Redundant_Cosignatures
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Redundant_Cosignatures")]
        FailureAggregateRedundantCosignatures = 38,

        /// <summary>
        /// Enum FailureAggregateIneligibleCosignatories for value: Failure_Aggregate_Ineligible_Cosignatories
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Ineligible_Cosignatories")]
        FailureAggregateIneligibleCosignatories = 39,

        /// <summary>
        /// Enum FailureAggregateMissingCosignatures for value: Failure_Aggregate_Missing_Cosignatures
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Missing_Cosignatures")]
        FailureAggregateMissingCosignatures = 40,

        /// <summary>
        /// Enum FailureAggregateTransactionsHashMismatch for value: Failure_Aggregate_Transactions_Hash_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Aggregate_Transactions_Hash_Mismatch")]
        FailureAggregateTransactionsHashMismatch = 41,

        /// <summary>
        /// Enum FailureLockHashInvalidMosaicId for value: Failure_LockHash_Invalid_Mosaic_Id
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Invalid_Mosaic_Id")]
        FailureLockHashInvalidMosaicId = 42,

        /// <summary>
        /// Enum FailureLockHashInvalidMosaicAmount for value: Failure_LockHash_Invalid_Mosaic_Amount
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Invalid_Mosaic_Amount")]
        FailureLockHashInvalidMosaicAmount = 43,

        /// <summary>
        /// Enum FailureLockHashHashAlreadyExists for value: Failure_LockHash_Hash_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Hash_Already_Exists")]
        FailureLockHashHashAlreadyExists = 44,

        /// <summary>
        /// Enum FailureLockHashUnknownHash for value: Failure_LockHash_Unknown_Hash
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Unknown_Hash")]
        FailureLockHashUnknownHash = 45,

        /// <summary>
        /// Enum FailureLockHashInactiveHash for value: Failure_LockHash_Inactive_Hash
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Inactive_Hash")]
        FailureLockHashInactiveHash = 46,

        /// <summary>
        /// Enum FailureLockHashInvalidDuration for value: Failure_LockHash_Invalid_Duration
        /// </summary>
        [EnumMember(Value = "Failure_LockHash_Invalid_Duration")]
        FailureLockHashInvalidDuration = 47,

        /// <summary>
        /// Enum FailureLockSecretInvalidHashAlgorithm for value: Failure_LockSecret_Invalid_Hash_Algorithm
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Invalid_Hash_Algorithm")]
        FailureLockSecretInvalidHashAlgorithm = 48,

        /// <summary>
        /// Enum FailureLockSecretHashAlreadyExists for value: Failure_LockSecret_Hash_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Hash_Already_Exists")]
        FailureLockSecretHashAlreadyExists = 49,

        /// <summary>
        /// Enum FailureLockSecretProofSizeOutOfBounds for value: Failure_LockSecret_Proof_Size_Out_Of_Bounds
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Proof_Size_Out_Of_Bounds")]
        FailureLockSecretProofSizeOutOfBounds = 50,

        /// <summary>
        /// Enum FailureLockSecretSecretMismatch for value: Failure_LockSecret_Secret_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Secret_Mismatch")]
        FailureLockSecretSecretMismatch = 51,

        /// <summary>
        /// Enum FailureLockSecretUnknownCompositeKey for value: Failure_LockSecret_Unknown_Composite_Key
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Unknown_Composite_Key")]
        FailureLockSecretUnknownCompositeKey = 52,

        /// <summary>
        /// Enum FailureLockSecretInactiveSecret for value: Failure_LockSecret_Inactive_Secret
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Inactive_Secret")]
        FailureLockSecretInactiveSecret = 53,

        /// <summary>
        /// Enum FailureLockSecretHashAlgorithmMismatch for value: Failure_LockSecret_Hash_Algorithm_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Hash_Algorithm_Mismatch")]
        FailureLockSecretHashAlgorithmMismatch = 54,

        /// <summary>
        /// Enum FailureLockSecretInvalidDuration for value: Failure_LockSecret_Invalid_Duration
        /// </summary>
        [EnumMember(Value = "Failure_LockSecret_Invalid_Duration")]
        FailureLockSecretInvalidDuration = 55,

        /// <summary>
        /// Enum FailureMetadataValueTooSmall for value: Failure_Metadata_Value_Too_Small
        /// </summary>
        [EnumMember(Value = "Failure_Metadata_Value_Too_Small")]
        FailureMetadataValueTooSmall = 56,

        /// <summary>
        /// Enum FailureMetadataValueTooLarge for value: Failure_Metadata_Value_Too_Large
        /// </summary>
        [EnumMember(Value = "Failure_Metadata_Value_Too_Large")]
        FailureMetadataValueTooLarge = 57,

        /// <summary>
        /// Enum FailureMetadataValueSizeDeltaTooLarge for value: Failure_Metadata_Value_Size_Delta_Too_Large
        /// </summary>
        [EnumMember(Value = "Failure_Metadata_Value_Size_Delta_Too_Large")]
        FailureMetadataValueSizeDeltaTooLarge = 58,

        /// <summary>
        /// Enum FailureMetadataValueSizeDeltaMismatch for value: Failure_Metadata_Value_Size_Delta_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Metadata_Value_Size_Delta_Mismatch")]
        FailureMetadataValueSizeDeltaMismatch = 59,

        /// <summary>
        /// Enum FailureMetadataValueChangeIrreversible for value: Failure_Metadata_Value_Change_Irreversible
        /// </summary>
        [EnumMember(Value = "Failure_Metadata_Value_Change_Irreversible")]
        FailureMetadataValueChangeIrreversible = 60,

        /// <summary>
        /// Enum FailureMosaicInvalidDuration for value: Failure_Mosaic_Invalid_Duration
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Duration")]
        FailureMosaicInvalidDuration = 61,

        /// <summary>
        /// Enum FailureMosaicInvalidName for value: Failure_Mosaic_Invalid_Name
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Name")]
        FailureMosaicInvalidName = 62,

        /// <summary>
        /// Enum FailureMosaicNameIdMismatch for value: Failure_Mosaic_Name_Id_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Name_Id_Mismatch")]
        FailureMosaicNameIdMismatch = 63,

        /// <summary>
        /// Enum FailureMosaicExpired for value: Failure_Mosaic_Expired
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Expired")]
        FailureMosaicExpired = 64,

        /// <summary>
        /// Enum FailureMosaicOwnerConflict for value: Failure_Mosaic_Owner_Conflict
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Owner_Conflict")]
        FailureMosaicOwnerConflict = 65,

        /// <summary>
        /// Enum FailureMosaicIdMismatch for value: Failure_Mosaic_Id_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Id_Mismatch")]
        FailureMosaicIdMismatch = 66,

        /// <summary>
        /// Enum FailureMosaicParentIdConflict for value: Failure_Mosaic_Parent_Id_Conflict
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Parent_Id_Conflict")]
        FailureMosaicParentIdConflict = 67,

        /// <summary>
        /// Enum FailureMosaicInvalidProperty for value: Failure_Mosaic_Invalid_Property
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Property")]
        FailureMosaicInvalidProperty = 68,

        /// <summary>
        /// Enum FailureMosaicInvalidFlags for value: Failure_Mosaic_Invalid_Flags
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Flags")]
        FailureMosaicInvalidFlags = 69,

        /// <summary>
        /// Enum FailureMosaicInvalidDivisibility for value: Failure_Mosaic_Invalid_Divisibility
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Divisibility")]
        FailureMosaicInvalidDivisibility = 70,

        /// <summary>
        /// Enum FailureMosaicInvalidSupplyChangeAction for value: Failure_Mosaic_Invalid_Supply_Change_Action
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Supply_Change_Action")]
        FailureMosaicInvalidSupplyChangeAction = 71,

        /// <summary>
        /// Enum FailureMosaicInvalidSupplyChangeAmount for value: Failure_Mosaic_Invalid_Supply_Change_Amount
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Supply_Change_Amount")]
        FailureMosaicInvalidSupplyChangeAmount = 72,

        /// <summary>
        /// Enum FailureMosaicInvalidId for value: Failure_Mosaic_Invalid_Id
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Invalid_Id")]
        FailureMosaicInvalidId = 73,

        /// <summary>
        /// Enum FailureMosaicModificationDisallowed for value: Failure_Mosaic_Modification_Disallowed
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Modification_Disallowed")]
        FailureMosaicModificationDisallowed = 74,

        /// <summary>
        /// Enum FailureMosaicModificationNoChanges for value: Failure_Mosaic_Modification_No_Changes
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Modification_No_Changes")]
        FailureMosaicModificationNoChanges = 75,

        /// <summary>
        /// Enum FailureMosaicSupplyImmutable for value: Failure_Mosaic_Supply_Immutable
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Supply_Immutable")]
        FailureMosaicSupplyImmutable = 76,

        /// <summary>
        /// Enum FailureMosaicSupplyNegative for value: Failure_Mosaic_Supply_Negative
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Supply_Negative")]
        FailureMosaicSupplyNegative = 77,

        /// <summary>
        /// Enum FailureMosaicSupplyExceeded for value: Failure_Mosaic_Supply_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Supply_Exceeded")]
        FailureMosaicSupplyExceeded = 78,

        /// <summary>
        /// Enum FailureMosaicNonTransferable for value: Failure_Mosaic_Non_Transferable
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Non_Transferable")]
        FailureMosaicNonTransferable = 79,

        /// <summary>
        /// Enum FailureMosaicMaxMosaicsExceeded for value: Failure_Mosaic_Max_Mosaics_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Max_Mosaics_Exceeded")]
        FailureMosaicMaxMosaicsExceeded = 80,

        /// <summary>
        /// Enum FailureMosaicRequiredPropertyFlagUnset for value: Failure_Mosaic_Required_Property_Flag_Unset
        /// </summary>
        [EnumMember(Value = "Failure_Mosaic_Required_Property_Flag_Unset")]
        FailureMosaicRequiredPropertyFlagUnset = 81,

        /// <summary>
        /// Enum FailureMultisigAccountInBothSets for value: Failure_Multisig_Account_In_Both_Sets
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Account_In_Both_Sets")]
        FailureMultisigAccountInBothSets = 82,

        /// <summary>
        /// Enum FailureMultisigMultipleDeletes for value: Failure_Multisig_Multiple_Deletes
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Multiple_Deletes")]
        FailureMultisigMultipleDeletes = 83,

        /// <summary>
        /// Enum FailureMultisigRedundantModification for value: Failure_Multisig_Redundant_Modification
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Redundant_Modification")]
        FailureMultisigRedundantModification = 84,

        /// <summary>
        /// Enum FailureMultisigUnknownMultisigAccount for value: Failure_Multisig_Unknown_Multisig_Account
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Unknown_Multisig_Account")]
        FailureMultisigUnknownMultisigAccount = 85,

        /// <summary>
        /// Enum FailureMultisigNotACosignatory for value: Failure_Multisig_Not_A_Cosignatory
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Not_A_Cosignatory")]
        FailureMultisigNotACosignatory = 86,

        /// <summary>
        /// Enum FailureMultisigAlreadyACosignatory for value: Failure_Multisig_Already_A_Cosignatory
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Already_A_Cosignatory")]
        FailureMultisigAlreadyACosignatory = 87,

        /// <summary>
        /// Enum FailureMultisigMinSettingOutOfRange for value: Failure_Multisig_Min_Setting_Out_Of_Range
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Min_Setting_Out_Of_Range")]
        FailureMultisigMinSettingOutOfRange = 88,

        /// <summary>
        /// Enum FailureMultisigMinSettingLargerThanNumCosignatories for value: Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories")]
        FailureMultisigMinSettingLargerThanNumCosignatories = 89,

        /// <summary>
        /// Enum FailureMultisigInvalidModificationAction for value: Failure_Multisig_Invalid_Modification_Action
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Invalid_Modification_Action")]
        FailureMultisigInvalidModificationAction = 90,

        /// <summary>
        /// Enum FailureMultisigMaxCosignedAccounts for value: Failure_Multisig_Max_Cosigned_Accounts
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Max_Cosigned_Accounts")]
        FailureMultisigMaxCosignedAccounts = 91,

        /// <summary>
        /// Enum FailureMultisigMaxCosignatories for value: Failure_Multisig_Max_Cosignatories
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Max_Cosignatories")]
        FailureMultisigMaxCosignatories = 92,

        /// <summary>
        /// Enum FailureMultisigLoop for value: Failure_Multisig_Loop
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Loop")]
        FailureMultisigLoop = 93,

        /// <summary>
        /// Enum FailureMultisigMaxMultisigDepth for value: Failure_Multisig_Max_Multisig_Depth
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Max_Multisig_Depth")]
        FailureMultisigMaxMultisigDepth = 94,

        /// <summary>
        /// Enum FailureMultisigOperationProhibitedByAccount for value: Failure_Multisig_Operation_Prohibited_By_Account
        /// </summary>
        [EnumMember(Value = "Failure_Multisig_Operation_Prohibited_By_Account")]
        FailureMultisigOperationProhibitedByAccount = 95,

        /// <summary>
        /// Enum FailureNamespaceInvalidDuration for value: Failure_Namespace_Invalid_Duration
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Invalid_Duration")]
        FailureNamespaceInvalidDuration = 96,

        /// <summary>
        /// Enum FailureNamespaceInvalidName for value: Failure_Namespace_Invalid_Name
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Invalid_Name")]
        FailureNamespaceInvalidName = 97,

        /// <summary>
        /// Enum FailureNamespaceNameIdMismatch for value: Failure_Namespace_Name_Id_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Name_Id_Mismatch")]
        FailureNamespaceNameIdMismatch = 98,

        /// <summary>
        /// Enum FailureNamespaceExpired for value: Failure_Namespace_Expired
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Expired")]
        FailureNamespaceExpired = 99,

        /// <summary>
        /// Enum FailureNamespaceOwnerConflict for value: Failure_Namespace_Owner_Conflict
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Owner_Conflict")]
        FailureNamespaceOwnerConflict = 100,

        /// <summary>
        /// Enum FailureNamespaceIdMismatch for value: Failure_Namespace_Id_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Id_Mismatch")]
        FailureNamespaceIdMismatch = 101,

        /// <summary>
        /// Enum FailureNamespaceInvalidRegistrationType for value: Failure_Namespace_Invalid_Registration_Type
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Invalid_Registration_Type")]
        FailureNamespaceInvalidRegistrationType = 102,

        /// <summary>
        /// Enum FailureNamespaceRootNameReserved for value: Failure_Namespace_Root_Name_Reserved
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Root_Name_Reserved")]
        FailureNamespaceRootNameReserved = 103,

        /// <summary>
        /// Enum FailureNamespaceTooDeep for value: Failure_Namespace_Too_Deep
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Too_Deep")]
        FailureNamespaceTooDeep = 104,

        /// <summary>
        /// Enum FailureNamespaceUnknownParent for value: Failure_Namespace_Unknown_Parent
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Unknown_Parent")]
        FailureNamespaceUnknownParent = 105,

        /// <summary>
        /// Enum FailureNamespaceAlreadyExists for value: Failure_Namespace_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Already_Exists")]
        FailureNamespaceAlreadyExists = 106,

        /// <summary>
        /// Enum FailureNamespaceAlreadyActive for value: Failure_Namespace_Already_Active
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Already_Active")]
        FailureNamespaceAlreadyActive = 107,

        /// <summary>
        /// Enum FailureNamespaceEternalAfterNemesisBlock for value: Failure_Namespace_Eternal_After_Nemesis_Block
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Eternal_After_Nemesis_Block")]
        FailureNamespaceEternalAfterNemesisBlock = 108,

        /// <summary>
        /// Enum FailureNamespaceMaxChildrenExceeded for value: Failure_Namespace_Max_Children_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Max_Children_Exceeded")]
        FailureNamespaceMaxChildrenExceeded = 109,

        /// <summary>
        /// Enum FailureNamespaceAliasInvalidAction for value: Failure_Namespace_Alias_Invalid_Action
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Alias_Invalid_Action")]
        FailureNamespaceAliasInvalidAction = 110,

        /// <summary>
        /// Enum FailureNamespaceUnknown for value: Failure_Namespace_Unknown
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Unknown")]
        FailureNamespaceUnknown = 111,

        /// <summary>
        /// Enum FailureNamespaceAliasAlreadyExists for value: Failure_Namespace_Alias_Already_Exists
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Alias_Already_Exists")]
        FailureNamespaceAliasAlreadyExists = 112,

        /// <summary>
        /// Enum FailureNamespaceUnknownAlias for value: Failure_Namespace_Unknown_Alias
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Unknown_Alias")]
        FailureNamespaceUnknownAlias = 113,

        /// <summary>
        /// Enum FailureNamespaceAliasInconsistentUnlinkType for value: Failure_Namespace_Alias_Inconsistent_Unlink_Type
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Alias_Inconsistent_Unlink_Type")]
        FailureNamespaceAliasInconsistentUnlinkType = 114,

        /// <summary>
        /// Enum FailureNamespaceAliasInconsistentUnlinkData for value: Failure_Namespace_Alias_Inconsistent_Unlink_Data
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Alias_Inconsistent_Unlink_Data")]
        FailureNamespaceAliasInconsistentUnlinkData = 115,

        /// <summary>
        /// Enum FailureNamespaceAliasInvalidAddress for value: Failure_Namespace_Alias_Invalid_Address
        /// </summary>
        [EnumMember(Value = "Failure_Namespace_Alias_Invalid_Address")]
        FailureNamespaceAliasInvalidAddress = 116,

        /// <summary>
        /// Enum FailureRestrictionAccountInvalidRestrictionFlags for value: Failure_RestrictionAccount_Invalid_Restriction_Flags
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Invalid_Restriction_Flags")]
        FailureRestrictionAccountInvalidRestrictionFlags = 117,

        /// <summary>
        /// Enum FailureRestrictionAccountInvalidModificationAction for value: Failure_RestrictionAccount_Invalid_Modification_Action
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Invalid_Modification_Action")]
        FailureRestrictionAccountInvalidModificationAction = 118,

        /// <summary>
        /// Enum FailureRestrictionAccountInvalidModificationAddress for value: Failure_RestrictionAccount_Invalid_Modification_Address
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Invalid_Modification_Address")]
        FailureRestrictionAccountInvalidModificationAddress = 119,

        /// <summary>
        /// Enum FailureRestrictionAccountModificationOperationTypeIncompatible for value: Failure_RestrictionAccount_Modification_Operation_Type_Incompatible
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Modification_Operation_Type_Incompatible")]
        FailureRestrictionAccountModificationOperationTypeIncompatible = 120,

        /// <summary>
        /// Enum FailureRestrictionAccountRedundantModification for value: Failure_RestrictionAccount_Redundant_Modification
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Redundant_Modification")]
        FailureRestrictionAccountRedundantModification = 121,

        /// <summary>
        /// Enum FailureRestrictionAccountInvalidModification for value: Failure_RestrictionAccount_Invalid_Modification
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Invalid_Modification")]
        FailureRestrictionAccountInvalidModification = 122,

        /// <summary>
        /// Enum FailureRestrictionAccountModificationCountExceeded for value: Failure_RestrictionAccount_Modification_Count_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Modification_Count_Exceeded")]
        FailureRestrictionAccountModificationCountExceeded = 123,

        /// <summary>
        /// Enum FailureRestrictionAccountNoModifications for value: Failure_RestrictionAccount_No_Modifications
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_No_Modifications")]
        FailureRestrictionAccountNoModifications = 124,

        /// <summary>
        /// Enum FailureRestrictionAccountValuesCountExceeded for value: Failure_RestrictionAccount_Values_Count_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Values_Count_Exceeded")]
        FailureRestrictionAccountValuesCountExceeded = 125,

        /// <summary>
        /// Enum FailureRestrictionAccountInvalidValue for value: Failure_RestrictionAccount_Invalid_Value
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Invalid_Value")]
        FailureRestrictionAccountInvalidValue = 126,

        /// <summary>
        /// Enum FailureRestrictionAccountAddressInteractionProhibited for value: Failure_RestrictionAccount_Address_Interaction_Prohibited
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Address_Interaction_Prohibited")]
        FailureRestrictionAccountAddressInteractionProhibited = 127,

        /// <summary>
        /// Enum FailureRestrictionAccountMosaicTransferProhibited for value: Failure_RestrictionAccount_Mosaic_Transfer_Prohibited
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Mosaic_Transfer_Prohibited")]
        FailureRestrictionAccountMosaicTransferProhibited = 128,

        /// <summary>
        /// Enum FailureRestrictionAccountOperationTypeProhibited for value: Failure_RestrictionAccount_Operation_Type_Prohibited
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionAccount_Operation_Type_Prohibited")]
        FailureRestrictionAccountOperationTypeProhibited = 129,

        /// <summary>
        /// Enum FailureRestrictionMosaicInvalidRestrictionType for value: Failure_RestrictionMosaic_Invalid_Restriction_Type
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Invalid_Restriction_Type")]
        FailureRestrictionMosaicInvalidRestrictionType = 130,

        /// <summary>
        /// Enum FailureRestrictionMosaicPreviousValueMismatch for value: Failure_RestrictionMosaic_Previous_Value_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Previous_Value_Mismatch")]
        FailureRestrictionMosaicPreviousValueMismatch = 131,

        /// <summary>
        /// Enum FailureRestrictionMosaicPreviousValueMustBeZero for value: Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero")]
        FailureRestrictionMosaicPreviousValueMustBeZero = 132,

        /// <summary>
        /// Enum FailureRestrictionMosaicMaxRestrictionsExceeded for value: Failure_RestrictionMosaic_Max_Restrictions_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Max_Restrictions_Exceeded")]
        FailureRestrictionMosaicMaxRestrictionsExceeded = 133,

        /// <summary>
        /// Enum FailureRestrictionMosaicCannotDeleteNonexistentRestriction for value: Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction")]
        FailureRestrictionMosaicCannotDeleteNonexistentRestriction = 134,

        /// <summary>
        /// Enum FailureRestrictionMosaicUnknownGlobalRestriction for value: Failure_RestrictionMosaic_Unknown_Global_Restriction
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Unknown_Global_Restriction")]
        FailureRestrictionMosaicUnknownGlobalRestriction = 135,

        /// <summary>
        /// Enum FailureRestrictionMosaicInvalidGlobalRestriction for value: Failure_RestrictionMosaic_Invalid_Global_Restriction
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Invalid_Global_Restriction")]
        FailureRestrictionMosaicInvalidGlobalRestriction = 136,

        /// <summary>
        /// Enum FailureRestrictionMosaicAccountUnauthorized for value: Failure_RestrictionMosaic_Account_Unauthorized
        /// </summary>
        [EnumMember(Value = "Failure_RestrictionMosaic_Account_Unauthorized")]
        FailureRestrictionMosaicAccountUnauthorized = 137,

        /// <summary>
        /// Enum FailureTransferMessageTooLarge for value: Failure_Transfer_Message_Too_Large
        /// </summary>
        [EnumMember(Value = "Failure_Transfer_Message_Too_Large")]
        FailureTransferMessageTooLarge = 138,

        /// <summary>
        /// Enum FailureTransferOutOfOrderMosaics for value: Failure_Transfer_Out_Of_Order_Mosaics
        /// </summary>
        [EnumMember(Value = "Failure_Transfer_Out_Of_Order_Mosaics")]
        FailureTransferOutOfOrderMosaics = 139,

        /// <summary>
        /// Enum FailureChainUnlinked for value: Failure_Chain_Unlinked
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Unlinked")]
        FailureChainUnlinked = 140,

        /// <summary>
        /// Enum FailureChainBlockNotHit for value: Failure_Chain_Block_Not_Hit
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Block_Not_Hit")]
        FailureChainBlockNotHit = 141,

        /// <summary>
        /// Enum FailureChainBlockInconsistentStateHash for value: Failure_Chain_Block_Inconsistent_State_Hash
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Block_Inconsistent_State_Hash")]
        FailureChainBlockInconsistentStateHash = 142,

        /// <summary>
        /// Enum FailureChainBlockInconsistentReceiptsHash for value: Failure_Chain_Block_Inconsistent_Receipts_Hash
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Block_Inconsistent_Receipts_Hash")]
        FailureChainBlockInconsistentReceiptsHash = 143,

        /// <summary>
        /// Enum FailureChainBlockInvalidVrfProof for value: Failure_Chain_Block_Invalid_Vrf_Proof
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Block_Invalid_Vrf_Proof")]
        FailureChainBlockInvalidVrfProof = 144,

        /// <summary>
        /// Enum FailureChainBlockUnknownSigner for value: Failure_Chain_Block_Unknown_Signer
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Block_Unknown_Signer")]
        FailureChainBlockUnknownSigner = 145,

        /// <summary>
        /// Enum FailureChainUnconfirmedCacheTooFull for value: Failure_Chain_Unconfirmed_Cache_Too_Full
        /// </summary>
        [EnumMember(Value = "Failure_Chain_Unconfirmed_Cache_Too_Full")]
        FailureChainUnconfirmedCacheTooFull = 146,

        /// <summary>
        /// Enum FailureConsumerEmptyInput for value: Failure_Consumer_Empty_Input
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Empty_Input")]
        FailureConsumerEmptyInput = 147,

        /// <summary>
        /// Enum FailureConsumerBlockTransactionsHashMismatch for value: Failure_Consumer_Block_Transactions_Hash_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Block_Transactions_Hash_Mismatch")]
        FailureConsumerBlockTransactionsHashMismatch = 148,

        /// <summary>
        /// Enum NeutralConsumerHashInRecencyCache for value: Neutral_Consumer_Hash_In_Recency_Cache
        /// </summary>
        [EnumMember(Value = "Neutral_Consumer_Hash_In_Recency_Cache")]
        NeutralConsumerHashInRecencyCache = 149,

        /// <summary>
        /// Enum FailureConsumerRemoteChainTooManyBlocks for value: Failure_Consumer_Remote_Chain_Too_Many_Blocks
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Too_Many_Blocks")]
        FailureConsumerRemoteChainTooManyBlocks = 150,

        /// <summary>
        /// Enum FailureConsumerRemoteChainImproperLink for value: Failure_Consumer_Remote_Chain_Improper_Link
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Improper_Link")]
        FailureConsumerRemoteChainImproperLink = 151,

        /// <summary>
        /// Enum FailureConsumerRemoteChainDuplicateTransactions for value: Failure_Consumer_Remote_Chain_Duplicate_Transactions
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Duplicate_Transactions")]
        FailureConsumerRemoteChainDuplicateTransactions = 152,

        /// <summary>
        /// Enum FailureConsumerRemoteChainUnlinked for value: Failure_Consumer_Remote_Chain_Unlinked
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Unlinked")]
        FailureConsumerRemoteChainUnlinked = 153,

        /// <summary>
        /// Enum FailureConsumerRemoteChainDifficultiesMismatch for value: Failure_Consumer_Remote_Chain_Difficulties_Mismatch
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Difficulties_Mismatch")]
        FailureConsumerRemoteChainDifficultiesMismatch = 154,

        /// <summary>
        /// Enum FailureConsumerRemoteChainScoreNotBetter for value: Failure_Consumer_Remote_Chain_Score_Not_Better
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Score_Not_Better")]
        FailureConsumerRemoteChainScoreNotBetter = 155,

        /// <summary>
        /// Enum FailureConsumerRemoteChainTooFarBehind for value: Failure_Consumer_Remote_Chain_Too_Far_Behind
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Too_Far_Behind")]
        FailureConsumerRemoteChainTooFarBehind = 156,

        /// <summary>
        /// Enum FailureConsumerRemoteChainTooFarInFuture for value: Failure_Consumer_Remote_Chain_Too_Far_In_Future
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Too_Far_In_Future")]
        FailureConsumerRemoteChainTooFarInFuture = 157,

        /// <summary>
        /// Enum FailureConsumerBatchSignatureNotVerifiable for value: Failure_Consumer_Batch_Signature_Not_Verifiable
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Batch_Signature_Not_Verifiable")]
        FailureConsumerBatchSignatureNotVerifiable = 158,

        /// <summary>
        /// Enum FailureConsumerRemoteChainImproperImportanceLink for value: Failure_Consumer_Remote_Chain_Improper_Importance_Link
        /// </summary>
        [EnumMember(Value = "Failure_Consumer_Remote_Chain_Improper_Importance_Link")]
        FailureConsumerRemoteChainImproperImportanceLink = 159,

        /// <summary>
        /// Enum FailureExtensionPartialTransactionCachePrune for value: Failure_Extension_Partial_Transaction_Cache_Prune
        /// </summary>
        [EnumMember(Value = "Failure_Extension_Partial_Transaction_Cache_Prune")]
        FailureExtensionPartialTransactionCachePrune = 160,

        /// <summary>
        /// Enum FailureExtensionPartialTransactionDependencyRemoved for value: Failure_Extension_Partial_Transaction_Dependency_Removed
        /// </summary>
        [EnumMember(Value = "Failure_Extension_Partial_Transaction_Dependency_Removed")]
        FailureExtensionPartialTransactionDependencyRemoved = 161,

        /// <summary>
        /// Enum FailureExtensionReadRateLimitExceeded for value: Failure_Extension_Read_Rate_Limit_Exceeded
        /// </summary>
        [EnumMember(Value = "Failure_Extension_Read_Rate_Limit_Exceeded")]
        FailureExtensionReadRateLimitExceeded = 162

    }

}
